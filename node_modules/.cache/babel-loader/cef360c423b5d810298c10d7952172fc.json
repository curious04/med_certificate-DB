{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = createContentfulApi;\nvar _contentfulSdkCore = require(\"contentful-sdk-core\");\nvar _entities = _interopRequireDefault(require(\"./entities\"));\nvar _pagedSync = _interopRequireDefault(require(\"./paged-sync\"));\nvar _normalizeSelect = _interopRequireDefault(require(\"./utils/normalize-select\"));\nvar _validateTimestamp = _interopRequireDefault(require(\"./utils/validate-timestamp\"));\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) {\n      symbols = symbols.filter(function (sym) {\n        return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n      });\n    }\n    keys.push.apply(keys, symbols);\n  }\n  return keys;\n}\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        _defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n  return target;\n}\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n  return obj;\n}\nconst ASSET_KEY_MAX_LIFETIME = 48 * 60 * 60;\n/**\n * Creates API object with methods to access functionality from Contentful's\n * Delivery API\n * @private\n * @param {Object} params - API initialization params\n * @prop {Object} http - HTTP client instance\n * @prop {Object} entities - Object with wrapper methods for each kind of entity\n * @prop {Function} getGlobalOptions - Link resolver preconfigured with global setting\n * @return {ClientAPI}\n */\n\nfunction createContentfulApi({\n  http,\n  getGlobalOptions\n}) {\n  const {\n    wrapSpace\n  } = _entities.default.space;\n  const {\n    wrapContentType,\n    wrapContentTypeCollection\n  } = _entities.default.contentType;\n  const {\n    wrapEntry,\n    wrapEntryCollection\n  } = _entities.default.entry;\n  const {\n    wrapAsset,\n    wrapAssetCollection\n  } = _entities.default.asset;\n  const {\n    wrapTag,\n    wrapTagCollection\n  } = _entities.default.tag;\n  const {\n    wrapAssetKey\n  } = _entities.default.assetKey;\n  const {\n    wrapLocaleCollection\n  } = _entities.default.locale;\n  const notFoundError = id => {\n    const error = new Error('The resource could not be found.');\n    error.sys = {\n      type: 'Error',\n      id: 'NotFound'\n    };\n    error.details = {\n      type: 'Entry',\n      id: id,\n      environment: getGlobalOptions().environment,\n      space: getGlobalOptions().space\n    };\n    return error;\n  };\n  function errorHandler(error) {\n    if (error.data) {\n      throw error.data;\n    }\n    if (error.response && error.response.data) {\n      throw error.response.data;\n    }\n    throw error;\n  }\n  /**\n   * Gets the Space which the client is currently configured to use\n   * @memberof ContentfulClientAPI\n   * @return {Promise<Entities.Space>} Promise for a Space\n   * @example\n   * const contentful = require('contentful')\n   *\n   * const client = contentful.createClient({\n   *   space: '<space_id>',\n   *   accessToken: '<content_delivery_api_key>'\n   * })\n   * // returns the space object with the above <space-id>\n   * const space = await client.getSpace()\n   * console.log(space)\n   */\n\n  async function getSpace() {\n    switchToSpace(http);\n    try {\n      const response = await http.get('');\n      return wrapSpace(response.data);\n    } catch (error) {\n      errorHandler(error);\n    }\n  }\n  /**\n   * Gets a Content Type\n   * @memberof ContentfulClientAPI\n   * @param  {string} id\n   * @return {Promise<Entities.ContentType>} Promise for a Content Type\n   * @example\n   * const contentful = require('contentful')\n   *\n   * const client = contentful.createClient({\n   *   space: '<space_id>',\n   *   accessToken: '<content_delivery_api_key>'\n   * })\n   *\n   * const contentType = await client.getContentType('<content_type_id>')\n   * console.log(contentType)\n   */\n\n  async function getContentType(id) {\n    switchToEnvironment(http);\n    try {\n      const response = await http.get(`content_types/${id}`);\n      return wrapContentType(response.data);\n    } catch (error) {\n      errorHandler(error);\n    }\n  }\n  /**\n   * Gets a collection of Content Types\n   * @memberof ContentfulClientAPI\n   * @param  {Object=} query - Object with search parameters. Check the <a href=\"https://www.contentful.com/developers/docs/javascript/tutorials/using-js-cda-sdk/#retrieving-entries-with-search-parameters\">JS SDK tutorial</a> and the <a href=\"https://www.contentful.com/developers/docs/references/content-delivery-api/#/reference/search-parameters\">REST API reference</a> for more details.\n   * @return {Promise<Entities.ContentTypeCollection>} Promise for a collection of Content Types\n   * @example\n   * const contentful = require('contentful')\n   *\n   * const client = contentful.createClient({\n   *   space: '<space_id>',\n   *   accessToken: '<content_delivery_api_key>'\n   * })\n   *\n   * const response = await client.getContentTypes()\n   * console.log(response.items)\n   */\n\n  async function getContentTypes(query = {}) {\n    switchToEnvironment(http);\n    try {\n      const response = await http.get('content_types', (0, _contentfulSdkCore.createRequestConfig)({\n        query: query\n      }));\n      return wrapContentTypeCollection(response.data);\n    } catch (error) {\n      errorHandler(error);\n    }\n  }\n  /**\n   * Gets an Entry\n   * @memberof ContentfulClientAPI\n   * @param  {string} id\n   * @param  {Object=} query - Object with search parameters. In this method it's only useful for `locale`.\n   * @return {Promise<Entities.Entry>} Promise for an Entry\n   * @example\n   * const contentful = require('contentful')\n   *\n   * const client = contentful.createClient({\n   *   space: '<space_id>',\n   *   accessToken: '<content_delivery_api_key>'\n   * })\n   *\n   * const entry = await client.getEntry('<entry_id>')\n   * console.log(entry)\n   */\n\n  async function getEntry(id, query = {}) {\n    if (!id) {\n      throw notFoundError(id);\n    }\n    try {\n      const response = await this.getEntries(_objectSpread({\n        'sys.id': id\n      }, query));\n      if (response.items.length > 0) {\n        return wrapEntry(response.items[0]);\n      } else {\n        throw notFoundError(id);\n      }\n    } catch (error) {\n      errorHandler(error);\n    }\n  }\n  /**\n   * Gets a collection of Entries\n   * @memberof ContentfulClientAPI\n   * @param  {Object=} query - Object with search parameters. Check the <a href=\"https://www.contentful.com/developers/docs/javascript/tutorials/using-js-cda-sdk/#retrieving-entries-with-search-parameters\">JS SDK tutorial</a> and the <a href=\"https://www.contentful.com/developers/docs/references/content-delivery-api/#/reference/search-parameters\">REST API reference</a> for more details.\n   * @return {Promise<Entities.EntryCollection>} Promise for a collection of Entries\n   * @example\n   * const contentful = require('contentful')\n   *\n   * const client = contentful.createClient({\n   *   space: '<space_id>',\n   *   accessToken: '<content_delivery_api_key>'\n   * })\n   *\n   * const response = await client.getEntries()\n   * .console.log(response.items)\n   */\n\n  async function getEntries(query = {}) {\n    switchToEnvironment(http);\n    const {\n      resolveLinks,\n      removeUnresolved\n    } = getGlobalOptions(query);\n    query = (0, _normalizeSelect.default)(query);\n    try {\n      const response = await http.get('entries', (0, _contentfulSdkCore.createRequestConfig)({\n        query: query\n      }));\n      return wrapEntryCollection(response.data, {\n        resolveLinks,\n        removeUnresolved\n      });\n    } catch (error) {\n      errorHandler(error);\n    }\n  }\n  /**\n   * Gets an Asset\n   * @memberof ContentfulClientAPI\n   * @param  {string} id\n   * @param  {Object=} query - Object with search parameters. In this method it's only useful for `locale`.\n   * @return {Promise<Entities.Asset>} Promise for an Asset\n   * @example\n   * const contentful = require('contentful')\n   *\n   * const client = contentful.createClient({\n   *   space: '<space_id>',\n   *   accessToken: '<content_delivery_api_key>'\n   * })\n   *\n   * const asset = await client.getAsset('<asset_id>')\n   * console.log(asset)\n   */\n\n  async function getAsset(id, query = {}) {\n    switchToEnvironment(http);\n    query = (0, _normalizeSelect.default)(query);\n    try {\n      const response = await http.get(`assets/${id}`, (0, _contentfulSdkCore.createRequestConfig)({\n        query: query\n      }));\n      return wrapAsset(response.data);\n    } catch (error) {\n      errorHandler(error);\n    }\n  }\n  /**\n   * Gets a collection of Assets\n   * @memberof ContentfulClientAPI\n   * @param  {Object=} query - Object with search parameters. Check the <a href=\"https://www.contentful.com/developers/docs/javascript/tutorials/using-js-cda-sdk/#retrieving-entries-with-search-parameters\">JS SDK tutorial</a> and the <a href=\"https://www.contentful.com/developers/docs/references/content-delivery-api/#/reference/search-parameters\">REST API reference</a> for more details.\n   * @return {Promise<Entities.AssetCollection>} Promise for a collection of Assets\n   * @example\n   * const contentful = require('contentful')\n   *\n   * const client = contentful.createClient({\n   *   space: '<space_id>',\n   *   accessToken: '<content_delivery_api_key>'\n   * })\n   *\n   * const response = await client.getAssets()\n   * console.log(response.items)\n   */\n\n  async function getAssets(query = {}) {\n    switchToEnvironment(http);\n    query = (0, _normalizeSelect.default)(query);\n    try {\n      const response = await http.get('assets', (0, _contentfulSdkCore.createRequestConfig)({\n        query: query\n      }));\n      return wrapAssetCollection(response.data);\n    } catch (error) {\n      errorHandler(error);\n    }\n  }\n  /**\n   * Gets a Tag\n   * @memberof ContentfulClientAPI\n   * @param  {string} id\n   * @return {Promise<Entities.Tag>} Promise for a Tag\n   * @example\n   * const contentful = require('contentful')\n   *\n   * const client = contentful.createClient({\n   *   space: '<space_id>',\n   *   accessToken: '<content_delivery_api_key>'\n   * })\n   *\n   * const tag = await client.getTag('<asset_id>')\n   * console.log(tag)\n   */\n\n  async function getTag(id) {\n    switchToEnvironment(http);\n    try {\n      const response = await http.get(`tags/${id}`);\n      return wrapTag(response.data);\n    } catch (error) {\n      errorHandler(error);\n    }\n  }\n  /**\n   * Gets a collection of Tags\n   * @memberof ContentfulClientAPI\n   * @param  {Object=} query - Object with search parameters.\n   * @return {Promise<Entities.TagCollection>} Promise for a collection of Tags\n   * @example\n   * const contentful = require('contentful')\n   *\n   * const client = contentful.createClient({\n   *   space: '<space_id>',\n   *   accessToken: '<content_delivery_api_key>'\n   * })\n   *\n   * const response = await client.getTags()\n   * console.log(response.items)\n   */\n\n  async function getTags(query = {}) {\n    switchToEnvironment(http);\n    query = (0, _normalizeSelect.default)(query);\n    try {\n      const response = await http.get('tags', (0, _contentfulSdkCore.createRequestConfig)({\n        query: query\n      }));\n      return wrapTagCollection(response.data);\n    } catch (error) {\n      errorHandler(error);\n    }\n  }\n  /**\n   * Creates an asset key for signing asset URLs (Embargoed Assets)\n   * @memberof ContentfulClientAPI\n   * @param {number} expiresAt - UNIX timestamp in the future, maximum of 48h from now\n   * @return {Promise<Entities.AssetKey>} Promise for an AssetKey\n   * @example\n   * const contentful = require('contentful')\n   *\n   * const client = contentful.createClient({\n   *   space: '<space_id>',\n   *   accessToken: '<content_delivery_api_key>'\n   * })\n   *\n   * const assetKey = await client.getAssetKey(<UNIX timestamp>)\n   * console.log(assetKey)\n   */\n\n  async function createAssetKey(expiresAt) {\n    switchToEnvironment(http);\n    try {\n      const now = Math.floor(Date.now() / 1000);\n      const currentMaxLifetime = now + ASSET_KEY_MAX_LIFETIME;\n      (0, _validateTimestamp.default)('expiresAt', expiresAt, {\n        maximum: currentMaxLifetime,\n        now\n      });\n      const params = {\n        expiresAt\n      };\n      const response = await http.post('asset_keys', params);\n      return wrapAssetKey(response.data);\n    } catch (error) {\n      errorHandler(error);\n    }\n  }\n  /**\n   * Gets a collection of Locale\n   * @memberof ContentfulClientAPI\n   * @param  {Object=} query - Object with search parameters. Check the <a href=\"https://www.contentful.com/developers/docs/javascript/tutorials/using-js-cda-sdk/#retrieving-entries-with-search-parameters\">JS SDK tutorial</a> and the <a href=\"https://www.contentful.com/developers/docs/references/content-delivery-api/#/reference/search-parameters\">REST API reference</a> for more details.\n   * @return {Promise<Entities.LocaleCollection>} Promise for a collection of Locale\n   * @example\n   * const contentful = require('contentful')\n   *\n   * const client = contentful.createClient({\n   *   space: '<space_id>',\n   *   accessToken: '<content_delivery_api_key>'\n   * })\n   *\n   * const response = await client.getLocales()\n   * console.log(response.items)\n   */\n\n  async function getLocales(query = {}) {\n    switchToEnvironment(http);\n    try {\n      const response = await http.get('locales', (0, _contentfulSdkCore.createRequestConfig)({\n        query: query\n      }));\n      return wrapLocaleCollection(response.data);\n    } catch (error) {\n      errorHandler(error);\n    }\n  }\n  /**\n   * Synchronizes either all the content or only new content since last sync\n   * See <a href=\"https://www.contentful.com/developers/docs/concepts/sync/\">Synchronization</a> for more information.\n   * <strong> Important note: </strong> The the sync api endpoint does not support include or link resolution.\n   * However contentful.js is doing link resolution client side if you only make an initial sync.\n   * For the delta sync (using nextSyncToken) it is not possible since the sdk wont have access to all the data to make such an operation.\n   * @memberof ContentfulClientAPI\n   * @param  {Object} query - Query object for the sync call. One of initial or nextSyncToken always needs to be specified, but not both.\n   * @param  {boolean?} query.initial - Indicates if this is the first sync. Use it if you don't have a sync token.\n   * @param  {string?} query.nextSyncToken - The token you got the last time you used this method. Ensures you only get changed content.\n   * @param  {string=} query.type - Filter by this type (all (default), Entry, Asset, Deletion, DeletedAsset or DeletedEntry)\n   * @param  {string=} query.content_type - Filter by this content type id\n   * @param  {boolean=} query.resolveLinks - When true, links to other Entries or Assets are resolved. Default: true.\n   * @param  {Object} options\n   * @param  {boolean=} [options.paginate = true] - Set to false to disable pagination\n   * @return {Promise<Sync.SyncCollection>} Promise for the collection resulting of a sync operation\n   * @example\n   * const contentful = require('contentful')\n   *\n   * const client = contentful.createClient({\n   *   space: '<space_id>',\n   *   accessToken: '<content_delivery_api_key>'\n   * })\n   *\n   * const response = await client.sync({\n   *   initial: true\n   * })\n   * console.log({\n   *   entries: response.entries,\n   *   assets: response.assets,\n   *   nextSyncToken: response.nextSyncToken\n   * })\n   */\n\n  async function sync(query = {}, options = {\n    paginate: true\n  }) {\n    const {\n      resolveLinks,\n      removeUnresolved\n    } = getGlobalOptions(query);\n    switchToEnvironment(http);\n    return (0, _pagedSync.default)(http, query, _objectSpread({\n      resolveLinks,\n      removeUnresolved\n    }, options));\n  }\n  /**\n  * Parse raw json data into collection of entry objects.Links will be resolved also\n  * @memberof ContentfulClientAPI\n  * @param {Object} raw json data\n  * @example\n  * let data = {items: [\n  *    {\n  *    sys: {type: 'Entry', locale: 'en-US'},\n  *    fields: {\n  *      animal: {sys: {type: 'Link', linkType: 'Animal', id: 'oink'}},\n  *      anotheranimal: {sys: {type: 'Link', linkType: 'Animal', id: 'middle-parrot'}}\n  *    }\n  *  }\n  * ],\n  * includes: {\n  *  Animal: [\n  *    {\n  *      sys: {type: 'Animal', id: 'oink', locale: 'en-US'},\n  *      fields: {\n  *        name: 'Pig',\n  *        friend: {sys: {type: 'Link', linkType: 'Animal', id: 'groundhog'}}\n  *      }\n  *    }\n  *   ]\n  *  }\n  * }\n  * console.log( data.items[0].fields.foo ); // undefined\n  * let parsedData = client.parseEntries(data);\n  * console.log( parsedData.items[0].fields.foo ); // foo\n  */\n\n  function parseEntries(data) {\n    const {\n      resolveLinks,\n      removeUnresolved\n    } = getGlobalOptions({});\n    return wrapEntryCollection(data, {\n      resolveLinks,\n      removeUnresolved\n    });\n  }\n  /*\n   * Switches BaseURL to use /environments path\n   * */\n\n  function switchToEnvironment(http) {\n    http.defaults.baseURL = getGlobalOptions().environmentBaseUrl;\n  }\n  /*\n   * Switches BaseURL to use /spaces path\n   * */\n\n  function switchToSpace(http) {\n    http.defaults.baseURL = getGlobalOptions().spaceBaseUrl;\n  }\n  return {\n    getSpace,\n    getContentType,\n    getContentTypes,\n    getEntry,\n    getEntries,\n    getAsset,\n    getAssets,\n    getTag,\n    getTags,\n    createAssetKey,\n    getLocales,\n    parseEntries,\n    sync\n  };\n}","map":{"version":3,"names":["Object","defineProperty","exports","value","default","createContentfulApi","_contentfulSdkCore","require","_entities","_interopRequireDefault","_pagedSync","_normalizeSelect","_validateTimestamp","obj","__esModule","ownKeys","object","enumerableOnly","keys","getOwnPropertySymbols","symbols","filter","sym","getOwnPropertyDescriptor","enumerable","push","apply","_objectSpread","target","i","arguments","length","source","forEach","key","_defineProperty","getOwnPropertyDescriptors","defineProperties","configurable","writable","ASSET_KEY_MAX_LIFETIME","http","getGlobalOptions","wrapSpace","space","wrapContentType","wrapContentTypeCollection","contentType","wrapEntry","wrapEntryCollection","entry","wrapAsset","wrapAssetCollection","asset","wrapTag","wrapTagCollection","tag","wrapAssetKey","assetKey","wrapLocaleCollection","locale","notFoundError","id","error","Error","sys","type","details","environment","errorHandler","data","response","getSpace","switchToSpace","get","getContentType","switchToEnvironment","getContentTypes","query","createRequestConfig","getEntry","getEntries","items","resolveLinks","removeUnresolved","getAsset","getAssets","getTag","getTags","createAssetKey","expiresAt","now","Math","floor","Date","currentMaxLifetime","maximum","params","post","getLocales","sync","options","paginate","parseEntries","defaults","baseURL","environmentBaseUrl","spaceBaseUrl"],"sources":["C:/Users/hrith/OneDrive/Desktop/medcertificates-main/node_modules/contentful/dist/es-modules/create-contentful-api.js"],"sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = createContentfulApi;\n\nvar _contentfulSdkCore = require(\"contentful-sdk-core\");\n\nvar _entities = _interopRequireDefault(require(\"./entities\"));\n\nvar _pagedSync = _interopRequireDefault(require(\"./paged-sync\"));\n\nvar _normalizeSelect = _interopRequireDefault(require(\"./utils/normalize-select\"));\n\nvar _validateTimestamp = _interopRequireDefault(require(\"./utils/validate-timestamp\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nconst ASSET_KEY_MAX_LIFETIME = 48 * 60 * 60;\n/**\n * Creates API object with methods to access functionality from Contentful's\n * Delivery API\n * @private\n * @param {Object} params - API initialization params\n * @prop {Object} http - HTTP client instance\n * @prop {Object} entities - Object with wrapper methods for each kind of entity\n * @prop {Function} getGlobalOptions - Link resolver preconfigured with global setting\n * @return {ClientAPI}\n */\n\nfunction createContentfulApi({\n  http,\n  getGlobalOptions\n}) {\n  const {\n    wrapSpace\n  } = _entities.default.space;\n  const {\n    wrapContentType,\n    wrapContentTypeCollection\n  } = _entities.default.contentType;\n  const {\n    wrapEntry,\n    wrapEntryCollection\n  } = _entities.default.entry;\n  const {\n    wrapAsset,\n    wrapAssetCollection\n  } = _entities.default.asset;\n  const {\n    wrapTag,\n    wrapTagCollection\n  } = _entities.default.tag;\n  const {\n    wrapAssetKey\n  } = _entities.default.assetKey;\n  const {\n    wrapLocaleCollection\n  } = _entities.default.locale;\n\n  const notFoundError = id => {\n    const error = new Error('The resource could not be found.');\n    error.sys = {\n      type: 'Error',\n      id: 'NotFound'\n    };\n    error.details = {\n      type: 'Entry',\n      id: id,\n      environment: getGlobalOptions().environment,\n      space: getGlobalOptions().space\n    };\n    return error;\n  };\n\n  function errorHandler(error) {\n    if (error.data) {\n      throw error.data;\n    }\n\n    if (error.response && error.response.data) {\n      throw error.response.data;\n    }\n\n    throw error;\n  }\n  /**\n   * Gets the Space which the client is currently configured to use\n   * @memberof ContentfulClientAPI\n   * @return {Promise<Entities.Space>} Promise for a Space\n   * @example\n   * const contentful = require('contentful')\n   *\n   * const client = contentful.createClient({\n   *   space: '<space_id>',\n   *   accessToken: '<content_delivery_api_key>'\n   * })\n   * // returns the space object with the above <space-id>\n   * const space = await client.getSpace()\n   * console.log(space)\n   */\n\n\n  async function getSpace() {\n    switchToSpace(http);\n\n    try {\n      const response = await http.get('');\n      return wrapSpace(response.data);\n    } catch (error) {\n      errorHandler(error);\n    }\n  }\n  /**\n   * Gets a Content Type\n   * @memberof ContentfulClientAPI\n   * @param  {string} id\n   * @return {Promise<Entities.ContentType>} Promise for a Content Type\n   * @example\n   * const contentful = require('contentful')\n   *\n   * const client = contentful.createClient({\n   *   space: '<space_id>',\n   *   accessToken: '<content_delivery_api_key>'\n   * })\n   *\n   * const contentType = await client.getContentType('<content_type_id>')\n   * console.log(contentType)\n   */\n\n\n  async function getContentType(id) {\n    switchToEnvironment(http);\n\n    try {\n      const response = await http.get(`content_types/${id}`);\n      return wrapContentType(response.data);\n    } catch (error) {\n      errorHandler(error);\n    }\n  }\n  /**\n   * Gets a collection of Content Types\n   * @memberof ContentfulClientAPI\n   * @param  {Object=} query - Object with search parameters. Check the <a href=\"https://www.contentful.com/developers/docs/javascript/tutorials/using-js-cda-sdk/#retrieving-entries-with-search-parameters\">JS SDK tutorial</a> and the <a href=\"https://www.contentful.com/developers/docs/references/content-delivery-api/#/reference/search-parameters\">REST API reference</a> for more details.\n   * @return {Promise<Entities.ContentTypeCollection>} Promise for a collection of Content Types\n   * @example\n   * const contentful = require('contentful')\n   *\n   * const client = contentful.createClient({\n   *   space: '<space_id>',\n   *   accessToken: '<content_delivery_api_key>'\n   * })\n   *\n   * const response = await client.getContentTypes()\n   * console.log(response.items)\n   */\n\n\n  async function getContentTypes(query = {}) {\n    switchToEnvironment(http);\n\n    try {\n      const response = await http.get('content_types', (0, _contentfulSdkCore.createRequestConfig)({\n        query: query\n      }));\n      return wrapContentTypeCollection(response.data);\n    } catch (error) {\n      errorHandler(error);\n    }\n  }\n  /**\n   * Gets an Entry\n   * @memberof ContentfulClientAPI\n   * @param  {string} id\n   * @param  {Object=} query - Object with search parameters. In this method it's only useful for `locale`.\n   * @return {Promise<Entities.Entry>} Promise for an Entry\n   * @example\n   * const contentful = require('contentful')\n   *\n   * const client = contentful.createClient({\n   *   space: '<space_id>',\n   *   accessToken: '<content_delivery_api_key>'\n   * })\n   *\n   * const entry = await client.getEntry('<entry_id>')\n   * console.log(entry)\n   */\n\n\n  async function getEntry(id, query = {}) {\n    if (!id) {\n      throw notFoundError(id);\n    }\n\n    try {\n      const response = await this.getEntries(_objectSpread({\n        'sys.id': id\n      }, query));\n\n      if (response.items.length > 0) {\n        return wrapEntry(response.items[0]);\n      } else {\n        throw notFoundError(id);\n      }\n    } catch (error) {\n      errorHandler(error);\n    }\n  }\n  /**\n   * Gets a collection of Entries\n   * @memberof ContentfulClientAPI\n   * @param  {Object=} query - Object with search parameters. Check the <a href=\"https://www.contentful.com/developers/docs/javascript/tutorials/using-js-cda-sdk/#retrieving-entries-with-search-parameters\">JS SDK tutorial</a> and the <a href=\"https://www.contentful.com/developers/docs/references/content-delivery-api/#/reference/search-parameters\">REST API reference</a> for more details.\n   * @return {Promise<Entities.EntryCollection>} Promise for a collection of Entries\n   * @example\n   * const contentful = require('contentful')\n   *\n   * const client = contentful.createClient({\n   *   space: '<space_id>',\n   *   accessToken: '<content_delivery_api_key>'\n   * })\n   *\n   * const response = await client.getEntries()\n   * .console.log(response.items)\n   */\n\n\n  async function getEntries(query = {}) {\n    switchToEnvironment(http);\n    const {\n      resolveLinks,\n      removeUnresolved\n    } = getGlobalOptions(query);\n    query = (0, _normalizeSelect.default)(query);\n\n    try {\n      const response = await http.get('entries', (0, _contentfulSdkCore.createRequestConfig)({\n        query: query\n      }));\n      return wrapEntryCollection(response.data, {\n        resolveLinks,\n        removeUnresolved\n      });\n    } catch (error) {\n      errorHandler(error);\n    }\n  }\n  /**\n   * Gets an Asset\n   * @memberof ContentfulClientAPI\n   * @param  {string} id\n   * @param  {Object=} query - Object with search parameters. In this method it's only useful for `locale`.\n   * @return {Promise<Entities.Asset>} Promise for an Asset\n   * @example\n   * const contentful = require('contentful')\n   *\n   * const client = contentful.createClient({\n   *   space: '<space_id>',\n   *   accessToken: '<content_delivery_api_key>'\n   * })\n   *\n   * const asset = await client.getAsset('<asset_id>')\n   * console.log(asset)\n   */\n\n\n  async function getAsset(id, query = {}) {\n    switchToEnvironment(http);\n    query = (0, _normalizeSelect.default)(query);\n\n    try {\n      const response = await http.get(`assets/${id}`, (0, _contentfulSdkCore.createRequestConfig)({\n        query: query\n      }));\n      return wrapAsset(response.data);\n    } catch (error) {\n      errorHandler(error);\n    }\n  }\n  /**\n   * Gets a collection of Assets\n   * @memberof ContentfulClientAPI\n   * @param  {Object=} query - Object with search parameters. Check the <a href=\"https://www.contentful.com/developers/docs/javascript/tutorials/using-js-cda-sdk/#retrieving-entries-with-search-parameters\">JS SDK tutorial</a> and the <a href=\"https://www.contentful.com/developers/docs/references/content-delivery-api/#/reference/search-parameters\">REST API reference</a> for more details.\n   * @return {Promise<Entities.AssetCollection>} Promise for a collection of Assets\n   * @example\n   * const contentful = require('contentful')\n   *\n   * const client = contentful.createClient({\n   *   space: '<space_id>',\n   *   accessToken: '<content_delivery_api_key>'\n   * })\n   *\n   * const response = await client.getAssets()\n   * console.log(response.items)\n   */\n\n\n  async function getAssets(query = {}) {\n    switchToEnvironment(http);\n    query = (0, _normalizeSelect.default)(query);\n\n    try {\n      const response = await http.get('assets', (0, _contentfulSdkCore.createRequestConfig)({\n        query: query\n      }));\n      return wrapAssetCollection(response.data);\n    } catch (error) {\n      errorHandler(error);\n    }\n  }\n  /**\n   * Gets a Tag\n   * @memberof ContentfulClientAPI\n   * @param  {string} id\n   * @return {Promise<Entities.Tag>} Promise for a Tag\n   * @example\n   * const contentful = require('contentful')\n   *\n   * const client = contentful.createClient({\n   *   space: '<space_id>',\n   *   accessToken: '<content_delivery_api_key>'\n   * })\n   *\n   * const tag = await client.getTag('<asset_id>')\n   * console.log(tag)\n   */\n\n\n  async function getTag(id) {\n    switchToEnvironment(http);\n\n    try {\n      const response = await http.get(`tags/${id}`);\n      return wrapTag(response.data);\n    } catch (error) {\n      errorHandler(error);\n    }\n  }\n  /**\n   * Gets a collection of Tags\n   * @memberof ContentfulClientAPI\n   * @param  {Object=} query - Object with search parameters.\n   * @return {Promise<Entities.TagCollection>} Promise for a collection of Tags\n   * @example\n   * const contentful = require('contentful')\n   *\n   * const client = contentful.createClient({\n   *   space: '<space_id>',\n   *   accessToken: '<content_delivery_api_key>'\n   * })\n   *\n   * const response = await client.getTags()\n   * console.log(response.items)\n   */\n\n\n  async function getTags(query = {}) {\n    switchToEnvironment(http);\n    query = (0, _normalizeSelect.default)(query);\n\n    try {\n      const response = await http.get('tags', (0, _contentfulSdkCore.createRequestConfig)({\n        query: query\n      }));\n      return wrapTagCollection(response.data);\n    } catch (error) {\n      errorHandler(error);\n    }\n  }\n  /**\n   * Creates an asset key for signing asset URLs (Embargoed Assets)\n   * @memberof ContentfulClientAPI\n   * @param {number} expiresAt - UNIX timestamp in the future, maximum of 48h from now\n   * @return {Promise<Entities.AssetKey>} Promise for an AssetKey\n   * @example\n   * const contentful = require('contentful')\n   *\n   * const client = contentful.createClient({\n   *   space: '<space_id>',\n   *   accessToken: '<content_delivery_api_key>'\n   * })\n   *\n   * const assetKey = await client.getAssetKey(<UNIX timestamp>)\n   * console.log(assetKey)\n   */\n\n\n  async function createAssetKey(expiresAt) {\n    switchToEnvironment(http);\n\n    try {\n      const now = Math.floor(Date.now() / 1000);\n      const currentMaxLifetime = now + ASSET_KEY_MAX_LIFETIME;\n      (0, _validateTimestamp.default)('expiresAt', expiresAt, {\n        maximum: currentMaxLifetime,\n        now\n      });\n      const params = {\n        expiresAt\n      };\n      const response = await http.post('asset_keys', params);\n      return wrapAssetKey(response.data);\n    } catch (error) {\n      errorHandler(error);\n    }\n  }\n  /**\n   * Gets a collection of Locale\n   * @memberof ContentfulClientAPI\n   * @param  {Object=} query - Object with search parameters. Check the <a href=\"https://www.contentful.com/developers/docs/javascript/tutorials/using-js-cda-sdk/#retrieving-entries-with-search-parameters\">JS SDK tutorial</a> and the <a href=\"https://www.contentful.com/developers/docs/references/content-delivery-api/#/reference/search-parameters\">REST API reference</a> for more details.\n   * @return {Promise<Entities.LocaleCollection>} Promise for a collection of Locale\n   * @example\n   * const contentful = require('contentful')\n   *\n   * const client = contentful.createClient({\n   *   space: '<space_id>',\n   *   accessToken: '<content_delivery_api_key>'\n   * })\n   *\n   * const response = await client.getLocales()\n   * console.log(response.items)\n   */\n\n\n  async function getLocales(query = {}) {\n    switchToEnvironment(http);\n\n    try {\n      const response = await http.get('locales', (0, _contentfulSdkCore.createRequestConfig)({\n        query: query\n      }));\n      return wrapLocaleCollection(response.data);\n    } catch (error) {\n      errorHandler(error);\n    }\n  }\n  /**\n   * Synchronizes either all the content or only new content since last sync\n   * See <a href=\"https://www.contentful.com/developers/docs/concepts/sync/\">Synchronization</a> for more information.\n   * <strong> Important note: </strong> The the sync api endpoint does not support include or link resolution.\n   * However contentful.js is doing link resolution client side if you only make an initial sync.\n   * For the delta sync (using nextSyncToken) it is not possible since the sdk wont have access to all the data to make such an operation.\n   * @memberof ContentfulClientAPI\n   * @param  {Object} query - Query object for the sync call. One of initial or nextSyncToken always needs to be specified, but not both.\n   * @param  {boolean?} query.initial - Indicates if this is the first sync. Use it if you don't have a sync token.\n   * @param  {string?} query.nextSyncToken - The token you got the last time you used this method. Ensures you only get changed content.\n   * @param  {string=} query.type - Filter by this type (all (default), Entry, Asset, Deletion, DeletedAsset or DeletedEntry)\n   * @param  {string=} query.content_type - Filter by this content type id\n   * @param  {boolean=} query.resolveLinks - When true, links to other Entries or Assets are resolved. Default: true.\n   * @param  {Object} options\n   * @param  {boolean=} [options.paginate = true] - Set to false to disable pagination\n   * @return {Promise<Sync.SyncCollection>} Promise for the collection resulting of a sync operation\n   * @example\n   * const contentful = require('contentful')\n   *\n   * const client = contentful.createClient({\n   *   space: '<space_id>',\n   *   accessToken: '<content_delivery_api_key>'\n   * })\n   *\n   * const response = await client.sync({\n   *   initial: true\n   * })\n   * console.log({\n   *   entries: response.entries,\n   *   assets: response.assets,\n   *   nextSyncToken: response.nextSyncToken\n   * })\n   */\n\n\n  async function sync(query = {}, options = {\n    paginate: true\n  }) {\n    const {\n      resolveLinks,\n      removeUnresolved\n    } = getGlobalOptions(query);\n    switchToEnvironment(http);\n    return (0, _pagedSync.default)(http, query, _objectSpread({\n      resolveLinks,\n      removeUnresolved\n    }, options));\n  }\n  /**\n  * Parse raw json data into collection of entry objects.Links will be resolved also\n  * @memberof ContentfulClientAPI\n  * @param {Object} raw json data\n  * @example\n  * let data = {items: [\n  *    {\n  *    sys: {type: 'Entry', locale: 'en-US'},\n  *    fields: {\n  *      animal: {sys: {type: 'Link', linkType: 'Animal', id: 'oink'}},\n  *      anotheranimal: {sys: {type: 'Link', linkType: 'Animal', id: 'middle-parrot'}}\n  *    }\n  *  }\n  * ],\n  * includes: {\n  *  Animal: [\n  *    {\n  *      sys: {type: 'Animal', id: 'oink', locale: 'en-US'},\n  *      fields: {\n  *        name: 'Pig',\n  *        friend: {sys: {type: 'Link', linkType: 'Animal', id: 'groundhog'}}\n  *      }\n  *    }\n  *   ]\n  *  }\n  * }\n  * console.log( data.items[0].fields.foo ); // undefined\n  * let parsedData = client.parseEntries(data);\n  * console.log( parsedData.items[0].fields.foo ); // foo\n  */\n\n\n  function parseEntries(data) {\n    const {\n      resolveLinks,\n      removeUnresolved\n    } = getGlobalOptions({});\n    return wrapEntryCollection(data, {\n      resolveLinks,\n      removeUnresolved\n    });\n  }\n  /*\n   * Switches BaseURL to use /environments path\n   * */\n\n\n  function switchToEnvironment(http) {\n    http.defaults.baseURL = getGlobalOptions().environmentBaseUrl;\n  }\n  /*\n   * Switches BaseURL to use /spaces path\n   * */\n\n\n  function switchToSpace(http) {\n    http.defaults.baseURL = getGlobalOptions().spaceBaseUrl;\n  }\n\n  return {\n    getSpace,\n    getContentType,\n    getContentTypes,\n    getEntry,\n    getEntries,\n    getAsset,\n    getAssets,\n    getTag,\n    getTags,\n    createAssetKey,\n    getLocales,\n    parseEntries,\n    sync\n  };\n}"],"mappings":"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"},"metadata":{},"sourceType":"script"}