{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = validateTimestamp;\nexports.ValidationError = void 0;\nclass ValidationError extends Error {\n  constructor(name, message) {\n    super(`Invalid \"${name}\" provided, ` + message);\n    this.name = 'ValidationError';\n  }\n}\nexports.ValidationError = ValidationError;\nfunction validateTimestamp(name, timestamp, options) {\n  options = options || {};\n  if (typeof timestamp !== 'number') {\n    throw new ValidationError(name, `only numeric values are allowed for timestamps, provided type was \"${typeof timestamp}\"`);\n  }\n  if (options.maximum && timestamp > options.maximum) {\n    throw new ValidationError(name, `value (${timestamp}) cannot be further in the future than expected maximum (${options.maximum})`);\n  }\n  if (options.now && timestamp < options.now) {\n    throw new ValidationError(name, `value (${timestamp}) cannot be in the past, current time was ${options.now}`);\n  }\n}","map":{"version":3,"names":["Object","defineProperty","exports","value","default","validateTimestamp","ValidationError","Error","constructor","name","message","timestamp","options","maximum","now"],"sources":["C:/Users/hrith/OneDrive/Desktop/medcertificates-main/node_modules/contentful/dist/es-modules/utils/validate-timestamp.js"],"sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = validateTimestamp;\nexports.ValidationError = void 0;\n\nclass ValidationError extends Error {\n  constructor(name, message) {\n    super(`Invalid \"${name}\" provided, ` + message);\n    this.name = 'ValidationError';\n  }\n\n}\n\nexports.ValidationError = ValidationError;\n\nfunction validateTimestamp(name, timestamp, options) {\n  options = options || {};\n\n  if (typeof timestamp !== 'number') {\n    throw new ValidationError(name, `only numeric values are allowed for timestamps, provided type was \"${typeof timestamp}\"`);\n  }\n\n  if (options.maximum && timestamp > options.maximum) {\n    throw new ValidationError(name, `value (${timestamp}) cannot be further in the future than expected maximum (${options.maximum})`);\n  }\n\n  if (options.now && timestamp < options.now) {\n    throw new ValidationError(name, `value (${timestamp}) cannot be in the past, current time was ${options.now}`);\n  }\n}"],"mappings":"AAAA,YAAY;;AAEZA,MAAM,CAACC,cAAc,CAACC,OAAO,EAAE,YAAY,EAAE;EAC3CC,KAAK,EAAE;AACT,CAAC,CAAC;AACFD,OAAO,CAACE,OAAO,GAAGC,iBAAiB;AACnCH,OAAO,CAACI,eAAe,GAAG,KAAK,CAAC;AAEhC,MAAMA,eAAe,SAASC,KAAK,CAAC;EAClCC,WAAWA,CAACC,IAAI,EAAEC,OAAO,EAAE;IACzB,KAAK,CAAE,YAAWD,IAAK,cAAa,GAAGC,OAAO,CAAC;IAC/C,IAAI,CAACD,IAAI,GAAG,iBAAiB;EAC/B;AAEF;AAEAP,OAAO,CAACI,eAAe,GAAGA,eAAe;AAEzC,SAASD,iBAAiBA,CAACI,IAAI,EAAEE,SAAS,EAAEC,OAAO,EAAE;EACnDA,OAAO,GAAGA,OAAO,IAAI,CAAC,CAAC;EAEvB,IAAI,OAAOD,SAAS,KAAK,QAAQ,EAAE;IACjC,MAAM,IAAIL,eAAe,CAACG,IAAI,EAAG,sEAAqE,OAAOE,SAAU,GAAE,CAAC;EAC5H;EAEA,IAAIC,OAAO,CAACC,OAAO,IAAIF,SAAS,GAAGC,OAAO,CAACC,OAAO,EAAE;IAClD,MAAM,IAAIP,eAAe,CAACG,IAAI,EAAG,UAASE,SAAU,4DAA2DC,OAAO,CAACC,OAAQ,GAAE,CAAC;EACpI;EAEA,IAAID,OAAO,CAACE,GAAG,IAAIH,SAAS,GAAGC,OAAO,CAACE,GAAG,EAAE;IAC1C,MAAM,IAAIR,eAAe,CAACG,IAAI,EAAG,UAASE,SAAU,6CAA4CC,OAAO,CAACE,GAAI,EAAC,CAAC;EAChH;AACF"},"metadata":{},"sourceType":"script"}