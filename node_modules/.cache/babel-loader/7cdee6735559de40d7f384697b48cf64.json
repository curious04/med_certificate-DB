{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = normalizeSelect;\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) {\n      symbols = symbols.filter(function (sym) {\n        return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n      });\n    }\n    keys.push.apply(keys, symbols);\n  }\n  return keys;\n}\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        _defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n  return target;\n}\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n  return obj;\n}\n\n/*\n* sdk relies heavily on sys metadata\n* so we cannot omit the sys property on sdk level entirely\n* and we have to ensure that at least `id` and `type` are present\n* */\nfunction normalizeSelect(query) {\n  if (!query.select) {\n    return query;\n  } // The selection of fields for the query is limited\n  // Get the different parts that are listed for selection\n\n  const allSelects = Array.isArray(query.select) ? query.select : query.select.split(','); // Move the parts into a set for easy access and deduplication\n\n  const selectedSet = new Set(allSelects); // If we already select all of `sys` we can just return\n  // since we're anyway fetching everything that is needed\n\n  if (selectedSet.has('sys')) {\n    return query;\n  } // We don't select `sys` so we need to ensure the minimum set\n\n  selectedSet.add('sys.id');\n  selectedSet.add('sys.type'); // Reassign the normalized sys properties\n\n  return _objectSpread(_objectSpread({}, query), {}, {\n    select: [...selectedSet].join(',')\n  });\n}","map":{"version":3,"names":["Object","defineProperty","exports","value","default","normalizeSelect","ownKeys","object","enumerableOnly","keys","getOwnPropertySymbols","symbols","filter","sym","getOwnPropertyDescriptor","enumerable","push","apply","_objectSpread","target","i","arguments","length","source","forEach","key","_defineProperty","getOwnPropertyDescriptors","defineProperties","obj","configurable","writable","query","select","allSelects","Array","isArray","split","selectedSet","Set","has","add","join"],"sources":["C:/Users/hrith/OneDrive/Desktop/medcertificates-main/node_modules/contentful/dist/es-modules/utils/normalize-select.js"],"sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = normalizeSelect;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n/*\n* sdk relies heavily on sys metadata\n* so we cannot omit the sys property on sdk level entirely\n* and we have to ensure that at least `id` and `type` are present\n* */\nfunction normalizeSelect(query) {\n  if (!query.select) {\n    return query;\n  } // The selection of fields for the query is limited\n  // Get the different parts that are listed for selection\n\n\n  const allSelects = Array.isArray(query.select) ? query.select : query.select.split(','); // Move the parts into a set for easy access and deduplication\n\n  const selectedSet = new Set(allSelects); // If we already select all of `sys` we can just return\n  // since we're anyway fetching everything that is needed\n\n  if (selectedSet.has('sys')) {\n    return query;\n  } // We don't select `sys` so we need to ensure the minimum set\n\n\n  selectedSet.add('sys.id');\n  selectedSet.add('sys.type'); // Reassign the normalized sys properties\n\n  return _objectSpread(_objectSpread({}, query), {}, {\n    select: [...selectedSet].join(',')\n  });\n}"],"mappings":"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"},"metadata":{},"sourceType":"script"}