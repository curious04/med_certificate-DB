{"ast":null,"code":"/**\n * Contentful Space API. Contains methods to access any operations at a space\n * level, such as creating and reading entities contained in a space.\n */\nimport { createRequestConfig } from 'contentful-sdk-core';\nimport entities from './entities';\n\n/**\n * Creates API object with methods to access the Space API\n * @param {MakeRequest} makeRequest - function to make requests via an adapter\n * @return {ContentfulSpaceAPI}\n * @private\n */\nexport default function createSpaceApi(makeRequest) {\n  var wrapSpace = entities.space.wrapSpace;\n  var _entities$environment = entities.environment,\n    wrapEnvironment = _entities$environment.wrapEnvironment,\n    wrapEnvironmentCollection = _entities$environment.wrapEnvironmentCollection;\n  var _entities$webhook = entities.webhook,\n    wrapWebhook = _entities$webhook.wrapWebhook,\n    wrapWebhookCollection = _entities$webhook.wrapWebhookCollection;\n  var _entities$role = entities.role,\n    wrapRole = _entities$role.wrapRole,\n    wrapRoleCollection = _entities$role.wrapRoleCollection;\n  var _entities$user = entities.user,\n    wrapUser = _entities$user.wrapUser,\n    wrapUserCollection = _entities$user.wrapUserCollection;\n  var _entities$spaceMember = entities.spaceMember,\n    wrapSpaceMember = _entities$spaceMember.wrapSpaceMember,\n    wrapSpaceMemberCollection = _entities$spaceMember.wrapSpaceMemberCollection;\n  var _entities$spaceMember2 = entities.spaceMembership,\n    wrapSpaceMembership = _entities$spaceMember2.wrapSpaceMembership,\n    wrapSpaceMembershipCollection = _entities$spaceMember2.wrapSpaceMembershipCollection;\n  var _entities$teamSpaceMe = entities.teamSpaceMembership,\n    wrapTeamSpaceMembership = _entities$teamSpaceMe.wrapTeamSpaceMembership,\n    wrapTeamSpaceMembershipCollection = _entities$teamSpaceMe.wrapTeamSpaceMembershipCollection;\n  var wrapTeamCollection = entities.team.wrapTeamCollection;\n  var _entities$apiKey = entities.apiKey,\n    wrapApiKey = _entities$apiKey.wrapApiKey,\n    wrapApiKeyCollection = _entities$apiKey.wrapApiKeyCollection;\n  var _entities$environment2 = entities.environmentAlias,\n    wrapEnvironmentAlias = _entities$environment2.wrapEnvironmentAlias,\n    wrapEnvironmentAliasCollection = _entities$environment2.wrapEnvironmentAliasCollection;\n  var _entities$previewApiK = entities.previewApiKey,\n    wrapPreviewApiKey = _entities$previewApiK.wrapPreviewApiKey,\n    wrapPreviewApiKeyCollection = _entities$previewApiK.wrapPreviewApiKeyCollection;\n  var _entities$scheduledAc = entities.scheduledAction,\n    wrapScheduledAction = _entities$scheduledAc.wrapScheduledAction,\n    wrapScheduledActionCollection = _entities$scheduledAc.wrapScheduledActionCollection;\n  return {\n    /**\n     * Deletes the space\n     * @return Promise for the deletion. It contains no data, but the Promise error case should be handled.\n     * @example ```javascript\n     * const contentful = require('contentful-management')\n     *\n     * const client = contentful.createClient({\n     *   accessToken: '<content_management_api_key>'\n     * })\n     *\n     * client.getSpace('<space_id>')\n     *   .then((space) => space.delete())\n     *   .then(() => console.log('Space deleted.'))\n     *   .catch(console.error)\n     * ```\n     */\n    \"delete\": function deleteSpace() {\n      var raw = this.toPlainObject();\n      return makeRequest({\n        entityType: 'Space',\n        action: 'delete',\n        params: {\n          spaceId: raw.sys.id\n        }\n      });\n    },\n    /**\n     * Updates the space\n     * @return Promise for the updated space.\n     * @example ```javascript\n     * const contentful = require('contentful-management')\n     *\n     * const client = contentful.createClient({\n     *   accessToken: '<content_management_api_key>'\n     * })\n     *\n     * client.getSpace('<space_id>')\n     * .then((space) => {\n     *   space.name = 'New name'\n     *   return space.update()\n     * })\n     * .then((space) => console.log(`Space ${space.sys.id} renamed.`)\n     * .catch(console.error)\n     * ```\n     */\n    update: function updateSpace() {\n      var raw = this.toPlainObject();\n      return makeRequest({\n        entityType: 'Space',\n        action: 'update',\n        params: {\n          spaceId: raw.sys.id\n        },\n        payload: raw,\n        headers: {}\n      }).then(function (data) {\n        return wrapSpace(makeRequest, data);\n      });\n    },\n    /**\n     * Gets an environment\n     * @param id - Environment ID\n     * @return Promise for an Environment\n     * @example ```javascript\n     * const contentful = require('contentful-management')\n     *\n     * const client = contentful.createClient({\n     *   accessToken: '<content_management_api_key>'\n     * })\n     *\n     * client.getSpace('<space_id>')\n     * .then((space) => space.getEnvironment('<environement_id>'))\n     * .then((environment) => console.log(environment))\n     * .catch(console.error)\n     * ```\n     */\n    getEnvironment: function getEnvironment(environmentId) {\n      var raw = this.toPlainObject();\n      return makeRequest({\n        entityType: 'Environment',\n        action: 'get',\n        params: {\n          spaceId: raw.sys.id,\n          environmentId: environmentId\n        }\n      }).then(function (data) {\n        return wrapEnvironment(makeRequest, data);\n      });\n    },\n    /**\n     * Gets a collection of Environments\n     * @return Promise for a collection of Environment\n     * @example ```javascript\n     * const contentful = require('contentful-management')\n     *\n     * const client = contentful.createClient({\n     *   accessToken: '<content_management_api_key>'\n     * })\n     *\n     * client.getSpace('<space_id>')\n     * .then((space) => space.getEnvironments())\n     * .then((response) => console.log(response.items))\n     * .catch(console.error)\n     * ```\n     */\n    getEnvironments: function getEnvironments() {\n      var query = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      var raw = this.toPlainObject();\n      return makeRequest({\n        entityType: 'Environment',\n        action: 'getMany',\n        params: {\n          spaceId: raw.sys.id,\n          query: query\n        }\n      }).then(function (data) {\n        return wrapEnvironmentCollection(makeRequest, data);\n      });\n    },\n    /**\n     * Creates an Environement\n     * @param data - Object representation of the Environment to be created\n     * @return Promise for the newly created Environment\n     * @example ```javascript\n     * const contentful = require('contentful-management')\n     *\n     * const client = contentful.createClient({\n     *   accessToken: '<content_management_api_key>'\n     * })\n     *\n     * client.getSpace('<space_id>')\n     * .then((space) => space.createEnvironment({ name: 'Staging' }))\n     * .then((environment) => console.log(environment))\n     * .catch(console.error)\n     * ```\n     */\n    createEnvironment: function createEnvironment() {\n      var data = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      var raw = this.toPlainObject();\n      return makeRequest({\n        entityType: 'Environment',\n        action: 'create',\n        params: {\n          spaceId: raw.sys.id\n        },\n        payload: data\n      }).then(function (response) {\n        return wrapEnvironment(makeRequest, response);\n      });\n    },\n    /**\n     * Creates an Environment with a custom ID\n     * @param id - Environment ID\n     * @param data - Object representation of the Environment to be created\n     * @param sourceEnvironmentId - ID of the source environment that will be copied to create the new environment. Default is \"master\"\n     * @return Promise for the newly created Environment\n     * @example ```javascript\n     * const contentful = require('contentful-management')\n     *\n     * const client = contentful.createClient({\n     *   accessToken: '<content_management_api_key>'\n     * })\n     *\n     * client.getSpace('<space_id>')\n     * .then((space) => space.createEnvironmentWithId('<environment-id>', { name: 'Staging'}, 'master'))\n     * .then((environment) => console.log(environment))\n     * .catch(console.error)\n     * ```\n     */\n    createEnvironmentWithId: function createEnvironmentWithId(id, data, sourceEnvironmentId) {\n      var raw = this.toPlainObject();\n      return makeRequest({\n        entityType: 'Environment',\n        action: 'createWithId',\n        params: {\n          spaceId: raw.sys.id,\n          environmentId: id,\n          sourceEnvironmentId: sourceEnvironmentId\n        },\n        payload: data\n      }).then(function (response) {\n        return wrapEnvironment(makeRequest, response);\n      });\n    },\n    /**\n     * Gets a Webhook\n     * @param id - Webhook ID\n     * @return Promise for a Webhook\n     * @example ```javascript\n     * const contentful = require('contentful-management')\n     *\n     * const client = contentful.createClient({\n     *   accessToken: '<content_management_api_key>'\n     * })\n     *\n     * client.getSpace('<space_id>')\n     * .then((space) => space.getWebhook('<webhook_id>'))\n     * .then((webhook) => console.log(webhook))\n     * .catch(console.error)\n     * ```\n     */\n    getWebhook: function getWebhook(id) {\n      var raw = this.toPlainObject();\n      return makeRequest({\n        entityType: 'Webhook',\n        action: 'get',\n        params: {\n          spaceId: raw.sys.id,\n          webhookDefinitionId: id\n        }\n      }).then(function (data) {\n        return wrapWebhook(makeRequest, data);\n      });\n    },\n    /**\n     * Gets a collection of Webhooks\n     * @return Promise for a collection of Webhooks\n     * @example ```javascript\n     * const contentful = require('contentful-management')\n     *\n     * const client = contentful.createClient({\n     *   accessToken: '<content_management_api_key>'\n     * })\n     *\n     * client.getSpace('<space_id>')\n     * .then((space) => space.getWebhooks())\n     * .then((response) => console.log(response.items))\n     * .catch(console.error)\n     * ```\n     */\n    getWebhooks: function getWebhooks() {\n      var raw = this.toPlainObject();\n      return makeRequest({\n        entityType: 'Webhook',\n        action: 'getMany',\n        params: {\n          spaceId: raw.sys.id\n        }\n      }).then(function (data) {\n        return wrapWebhookCollection(makeRequest, data);\n      });\n    },\n    /**\n     * Creates a Webhook\n     * @param data - Object representation of the Webhook to be created\n     * @return Promise for the newly created Webhook\n     * @example ```javascript\n     * const contentful = require('contentful-management')\n     *\n     * client.getSpace('<space_id>')\n     * .then((space) => space.createWebhook({\n     *   'name': 'My webhook',\n     *   'url': 'https://www.example.com/test',\n     *   'topics': [\n     *     'Entry.create',\n     *     'ContentType.create',\n     *     '*.publish',\n     *     'Asset.*'\n     *   ]\n     * }))\n     * .then((webhook) => console.log(webhook))\n     * .catch(console.error)\n     * ```\n     */\n    createWebhook: function createWebhook(data) {\n      var raw = this.toPlainObject();\n      return makeRequest({\n        entityType: 'Webhook',\n        action: 'create',\n        params: {\n          spaceId: raw.sys.id\n        },\n        payload: data\n      }).then(function (data) {\n        return wrapWebhook(makeRequest, data);\n      });\n    },\n    /**\n     * Creates a Webhook with a custom ID\n     * @param id - Webhook ID\n     * @param  data - Object representation of the Webhook to be created\n     * @return Promise for the newly created Webhook\n     * @example ```javascript\n     * const contentful = require('contentful-management')\n     *\n     * client.getSpace('<space_id>')\n     * .then((space) => space.createWebhookWithId('<webhook_id>', {\n     *   'name': 'My webhook',\n     *   'url': 'https://www.example.com/test',\n     *   'topics': [\n     *     'Entry.create',\n     *     'ContentType.create',\n     *     '*.publish',\n     *     'Asset.*'\n     *   ]\n     * }))\n     * .then((webhook) => console.log(webhook))\n     * .catch(console.error)\n     * ```\n     */\n    createWebhookWithId: function createWebhookWithId(id, data) {\n      var raw = this.toPlainObject();\n      return makeRequest({\n        entityType: 'Webhook',\n        action: 'createWithId',\n        params: {\n          spaceId: raw.sys.id,\n          webhookDefinitionId: id\n        },\n        payload: data\n      }).then(function (data) {\n        return wrapWebhook(makeRequest, data);\n      });\n    },\n    /**\n     * Gets a Role\n     * @param id - Role ID\n     * @return Promise for a Role\n     * @example ```javascript\n     * const contentful = require('contentful-management')\n     *\n     * const client = contentful.createClient({\n     *   accessToken: '<content_management_api_key>'\n     * })\n     *\n     * client.getSpace('<space_id>')\n     * .then((space) => space.createRole({\n     *   fields: {\n     *     title: {\n     *       'en-US': 'Role title'\n     *     }\n     *   }\n     * }))\n     * .then((role) => console.log(role))\n     * .catch(console.error)\n     * ```\n     */\n    getRole: function getRole(id) {\n      var raw = this.toPlainObject();\n      return makeRequest({\n        entityType: 'Role',\n        action: 'get',\n        params: {\n          spaceId: raw.sys.id,\n          roleId: id\n        }\n      }).then(function (data) {\n        return wrapRole(makeRequest, data);\n      });\n    },\n    /**\n     * Gets a collection of Roles\n     * @return Promise for a collection of Roles\n     * @example ```javascript\n     * const contentful = require('contentful-management')\n     *\n     * const client = contentful.createClient({\n     *   accessToken: '<content_management_api_key>'\n     * })\n     *\n     * client.getSpace('<space_id>')\n     * .then((space) => space.getRoles())\n     * .then((response) => console.log(response.items))\n     * .catch(console.error)\n     * ```\n     */\n    getRoles: function getRoles() {\n      var query = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      var raw = this.toPlainObject();\n      return makeRequest({\n        entityType: 'Role',\n        action: 'getMany',\n        params: {\n          spaceId: raw.sys.id,\n          query: createRequestConfig({\n            query: query\n          }).params\n        }\n      }).then(function (data) {\n        return wrapRoleCollection(makeRequest, data);\n      });\n    },\n    /**\n     * Creates a Role\n     * @param data - Object representation of the Role to be created\n     * @return  Promise for the newly created Role\n     * @example ```javascript\n     * const contentful = require('contentful-management')\n     *\n     * const client = contentful.createClient({\n     *   accessToken: '<content_management_api_key>'\n     * })\n     * client.getSpace('<space_id>')\n     * .then((space) => space.createRole({\n     *   name: 'My Role',\n     *   description: 'foobar role',\n     *   permissions: {\n     *     ContentDelivery: 'all',\n     *     ContentModel: ['read'],\n     *     Settings: []\n     *   },\n     *   policies: [\n     *     {\n     *       effect: 'allow',\n     *       actions: 'all',\n     *       constraint: {\n     *         and: [\n     *           {\n     *             equals: [\n     *               { doc: 'sys.type' },\n     *               'Entry'\n     *             ]\n     *           },\n     *           {\n     *             equals: [\n     *               { doc: 'sys.type' },\n     *               'Asset'\n     *             ]\n     *           }\n     *         ]\n     *       }\n     *     }\n     *   ]\n     * }))\n     * .then((role) => console.log(role))\n     * .catch(console.error)\n     * ```\n     */\n    createRole: function createRole(data) {\n      var raw = this.toPlainObject();\n      return makeRequest({\n        entityType: 'Role',\n        action: 'create',\n        params: {\n          spaceId: raw.sys.id\n        },\n        payload: data\n      }).then(function (data) {\n        return wrapRole(makeRequest, data);\n      });\n    },\n    /**\n     * Creates a Role with a custom ID\n     * @param id - Role ID\n     * @param data - Object representation of the Role to be created\n     * @return Promise for the newly created Role\n     * @example ```javascript\n     * const contentful = require('contentful-management')\n     *\n     * const client = contentful.createClient({\n     *   accessToken: '<content_management_api_key>'\n     * })\n     * client.getSpace('<space_id>')\n     * .then((space) => space.createRoleWithId('<role-id>', {\n     *   name: 'My Role',\n     *   description: 'foobar role',\n     *   permissions: {\n     *     ContentDelivery: 'all',\n     *     ContentModel: ['read'],\n     *     Settings: []\n     *   },\n     *   policies: [\n     *     {\n     *       effect: 'allow',\n     *       actions: 'all',\n     *       constraint: {\n     *         and: [\n     *           {\n     *             equals: [\n     *               { doc: 'sys.type' },\n     *               'Entry'\n     *             ]\n     *           },\n     *           {\n     *             equals: [\n     *               { doc: 'sys.type' },\n     *               'Asset'\n     *             ]\n     *           }\n     *         ]\n     *       }\n     *     }\n     *   ]\n     * }))\n     * .then((role) => console.log(role))\n     * .catch(console.error)\n     * ```\n     */\n    createRoleWithId: function createRoleWithId(id, roleData) {\n      var raw = this.toPlainObject();\n      return makeRequest({\n        entityType: 'Role',\n        action: 'createWithId',\n        params: {\n          spaceId: raw.sys.id,\n          roleId: id\n        },\n        payload: roleData\n      }).then(function (data) {\n        return wrapRole(makeRequest, data);\n      });\n    },\n    /**\n     * Gets a User\n     * @param userId - User ID\n     * @return Promise for a User\n     * @example ```javascript\n     * const contentful = require('contentful-management')\n     *\n     * client.getSpace('<space_id>')\n     * .then((space) => space.getSpaceUser('id'))\n     * .then((user) => console.log(user))\n     * .catch(console.error)\n     * ```\n     */\n    getSpaceUser: function getSpaceUser(userId) {\n      var raw = this.toPlainObject();\n      return makeRequest({\n        entityType: 'User',\n        action: 'getForSpace',\n        params: {\n          spaceId: raw.sys.id,\n          userId: userId\n        }\n      }).then(function (data) {\n        return wrapUser(makeRequest, data);\n      });\n    },\n    /**\n     * Gets a collection of Users in a space\n     * @param query - Object with search parameters. Check the <a href=\"https://www.contentful.com/developers/docs/javascript/tutorials/using-js-cda-sdk/#retrieving-entries-with-search-parameters\">JS SDK tutorial</a> and the <a href=\"https://www.contentful.com/developers/docs/references/content-delivery-api/#/reference/search-parameters\">REST API reference</a> for more details.\n     * @return Promise a collection of Users in a space\n     * @example ```javascript\n     * const contentful = require('contentful-management')\n     *\n     * client.getSpace('<space_id>')\n     * .then((space) => space.getSpaceUsers(query))\n     * .then((data) => console.log(data))\n     * .catch(console.error)\n     * ```\n     */\n    getSpaceUsers: function getSpaceUsers() {\n      var query = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      var raw = this.toPlainObject();\n      return makeRequest({\n        entityType: 'User',\n        action: 'getManyForSpace',\n        params: {\n          spaceId: raw.sys.id,\n          query: createRequestConfig({\n            query: query\n          }).params\n        }\n      }).then(function (data) {\n        return wrapUserCollection(makeRequest, data);\n      });\n    },\n    /**\n     * Gets a collection of teams for a space\n     * @param query\n     * @return Promise for a collection of teams for a space\n     * @example ```javascript\n     * const contentful = require('contentful-management')\n     *\n     * client.getSpace('<space_id>')\n     * .then((space) => space.getTeams())\n     * .then((teamsCollection) => console.log(teamsCollection))\n     * .catch(console.error)\n     * ```\n     */\n    getTeams: function getTeams() {\n      var query = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {\n        limit: 100\n      };\n      var raw = this.toPlainObject();\n      return makeRequest({\n        entityType: 'Team',\n        action: 'getManyForSpace',\n        params: {\n          spaceId: raw.sys.id,\n          query: createRequestConfig({\n            query: query\n          }).params\n        }\n      }).then(function (data) {\n        return wrapTeamCollection(makeRequest, data);\n      });\n    },\n    /**\n     * Gets a Space Member\n     * @param id Get Space Member by user_id\n     * @return Promise for a Space Member\n     * @example ```javascript\n     * const contentful = require('contentful-management')\n     *\n     * client.getSpace('<space_id>')\n     * .then((space) => space.getSpaceMember(id))\n     * .then((spaceMember) => console.log(spaceMember))\n     * .catch(console.error)\n     * ```\n     */\n    getSpaceMember: function getSpaceMember(id) {\n      var raw = this.toPlainObject();\n      return makeRequest({\n        entityType: 'SpaceMember',\n        action: 'get',\n        params: {\n          spaceId: raw.sys.id,\n          spaceMemberId: id\n        }\n      }).then(function (data) {\n        return wrapSpaceMember(makeRequest, data);\n      });\n    },\n    /**\n     * Gets a collection of Space Members\n     * @param query\n     * @return Promise for a collection of Space Members\n     * @example ```javascript\n     * const contentful = require('contentful-management')\n     *\n     * client.getSpace('<space_id>')\n     * .then((space) => space.getSpaceMembers({'limit': 100}))\n     * .then((spaceMemberCollection) => console.log(spaceMemberCollection))\n     * .catch(console.error)\n     * ```\n     */\n    getSpaceMembers: function getSpaceMembers() {\n      var query = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      var raw = this.toPlainObject();\n      return makeRequest({\n        entityType: 'SpaceMember',\n        action: 'getMany',\n        params: {\n          spaceId: raw.sys.id,\n          query: createRequestConfig({\n            query: query\n          }).params\n        }\n      }).then(function (data) {\n        return wrapSpaceMemberCollection(makeRequest, data);\n      });\n    },\n    /**\n     * Gets a Space Membership\n     * Warning: the user attribute in the space membership root is deprecated. The attribute has been moved inside the sys  object (i.e. sys.user).\n     * @param id - Space Membership ID\n     * @return Promise for a Space Membership\n     * @example ```javascript\n     * const contentful = require('contentful-management')\n     *\n     * client.getSpace('<space_id>')\n     * .then((space) => space.getSpaceMembership('id'))\n     * .then((spaceMembership) => console.log(spaceMembership))\n     * .catch(console.error)\n     * ```\n     */\n    getSpaceMembership: function getSpaceMembership(id) {\n      var raw = this.toPlainObject();\n      return makeRequest({\n        entityType: 'SpaceMembership',\n        action: 'get',\n        params: {\n          spaceId: raw.sys.id,\n          spaceMembershipId: id\n        }\n      }).then(function (data) {\n        return wrapSpaceMembership(makeRequest, data);\n      });\n    },\n    /**\n     * Gets a collection of Space Memberships\n     * Warning: the user attribute in the space membership root is deprecated. The attribute has been moved inside the sys  object (i.e. sys.user).\n     * @param query - Object with search parameters. Check the <a href=\"https://www.contentful.com/developers/docs/javascript/tutorials/using-js-cda-sdk/#retrieving-entries-with-search-parameters\">JS SDK tutorial</a> and the <a href=\"https://www.contentful.com/developers/docs/references/content-delivery-api/#/reference/search-parameters\">REST API reference</a> for more details.\n     * @return Promise for a collection of Space Memberships\n     * @example ```javascript\n     * const contentful = require('contentful-management')\n     *\n     * client.getSpace('<space_id>')\n     * .then((space) => space.getSpaceMemberships({'limit': 100})) // you can add more queries as 'key': 'value'\n     * .then((response) => console.log(response.items))\n     * .catch(console.error)\n     * ```\n     */\n    getSpaceMemberships: function getSpaceMemberships() {\n      var query = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      var raw = this.toPlainObject();\n      return makeRequest({\n        entityType: 'SpaceMembership',\n        action: 'getMany',\n        params: {\n          spaceId: raw.sys.id,\n          query: createRequestConfig({\n            query: query\n          }).params\n        }\n      }).then(function (data) {\n        return wrapSpaceMembershipCollection(makeRequest, data);\n      });\n    },\n    /**\n     * Creates a Space Membership\n     * Warning: the user attribute in the space membership root is deprecated. The attribute has been moved inside the sys  object (i.e. sys.user).\n     * @param  data - Object representation of the Space Membership to be created\n     * @return Promise for the newly created Space Membership\n     * @example ```javascript\n     * const contentful = require('contentful-management')\n     *\n     * const client = contentful.createClient({\n     *   accessToken: '<content_management_api_key>'\n     * })\n     *\n     * client.getSpace('<space_id>')\n     * .then((space) => space.createSpaceMembership({\n     *   admin: false,\n     *   roles: [\n     *     {\n     *       type: 'Link',\n     *       linkType: 'Role',\n     *       id: '<role_id>'\n     *     }\n     *   ],\n     *   email: 'foo@example.com'\n     * }))\n     * .then((spaceMembership) => console.log(spaceMembership))\n     * .catch(console.error)\n     * ```\n     */\n    createSpaceMembership: function createSpaceMembership(data) {\n      var raw = this.toPlainObject();\n      return makeRequest({\n        entityType: 'SpaceMembership',\n        action: 'create',\n        params: {\n          spaceId: raw.sys.id\n        },\n        payload: data\n      }).then(function (response) {\n        return wrapSpaceMembership(makeRequest, response);\n      });\n    },\n    /**\n     * Creates a Space Membership with a custom ID\n     * Warning: the user attribute in the space membership root is deprecated. The attribute has been moved inside the sys  object (i.e. sys.user).\n     * @param id - Space Membership ID\n     * @param data - Object representation of the Space Membership to be created\n     * @return Promise for the newly created Space Membership\n     * @example ```javascript\n     * const contentful = require('contentful-management')\n     *\n     * const client = contentful.createClient({\n     *   accessToken: '<content_management_api_key>'\n     * })\n     *\n     * client.getSpace('<space_id>')\n     * .then((space) => space.createSpaceMembershipWithId('<space-membership-id>', {\n     *   admin: false,\n     *   roles: [\n     *     {\n     *       type: 'Link',\n     *       linkType: 'Role',\n     *       id: '<role_id>'\n     *     }\n     *   ],\n     *   email: 'foo@example.com'\n     * }))\n     * .then((spaceMembership) => console.log(spaceMembership))\n     * .catch(console.error)\n     * ```\n     */\n    createSpaceMembershipWithId: function createSpaceMembershipWithId(id, data) {\n      var raw = this.toPlainObject();\n      return makeRequest({\n        entityType: 'SpaceMembership',\n        action: 'createWithId',\n        params: {\n          spaceId: raw.sys.id,\n          spaceMembershipId: id\n        },\n        payload: data\n      }).then(function (response) {\n        return wrapSpaceMembership(makeRequest, response);\n      });\n    },\n    /**\n     * Gets a Team Space Membership\n     * @param id - Team Space Membership ID\n     * @return Promise for a Team Space Membership\n     * @example ```javascript\n     * const contentful = require('contentful-management')\n     *\n     * client.getSpace('<space_id>')\n     * .then((space) => space.getTeamSpaceMembership('team_space_membership_id'))\n     * .then((teamSpaceMembership) => console.log(teamSpaceMembership))\n     * .catch(console.error)\n     * ```\n     */\n    getTeamSpaceMembership: function getTeamSpaceMembership(teamSpaceMembershipId) {\n      var raw = this.toPlainObject();\n      return makeRequest({\n        entityType: 'TeamSpaceMembership',\n        action: 'get',\n        params: {\n          spaceId: raw.sys.id,\n          teamSpaceMembershipId: teamSpaceMembershipId\n        }\n      }).then(function (data) {\n        return wrapTeamSpaceMembership(makeRequest, data);\n      });\n    },\n    /**\n     * Gets a collection of Team Space Memberships\n     * @param query - Object with search parameters. Check the <a href=\"https://www.contentful.com/developers/docs/javascript/tutorials/using-js-cda-sdk/#retrieving-entries-with-search-parameters\">JS SDK tutorial</a> and the <a href=\"https://www.contentful.com/developers/docs/references/content-delivery-api/#/reference/search-parameters\">REST API reference</a> for more details.\n     * @return Promise for a collection of Team Space Memberships\n     * @example ```javascript\n     * const contentful = require('contentful-management')\n     *\n     * client.getSpace('<space_id>')\n     * .then((space) => space.getTeamSpaceMemberships())\n     * .then((response) => console.log(response.items))\n     * .catch(console.error)\n     * ```\n     */\n    getTeamSpaceMemberships: function getTeamSpaceMemberships() {\n      var query = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      var raw = this.toPlainObject();\n      return makeRequest({\n        entityType: 'TeamSpaceMembership',\n        action: 'getMany',\n        params: {\n          spaceId: raw.sys.id,\n          query: createRequestConfig({\n            query: query\n          }).params\n        }\n      }).then(function (data) {\n        return wrapTeamSpaceMembershipCollection(makeRequest, data);\n      });\n    },\n    /**\n    * Creates a Team Space Membership\n    * @param id - Team ID\n    * @param data - Object representation of the Team Space Membership to be created\n    * @return Promise for the newly created Team Space Membership\n    * @example ```javascript\n    * const contentful = require('contentful-management')\n    *\n    * const client = contentful.createClient({\n    *   accessToken: '<content_management_api_key>'\n    * })\n    *\n    * client.getSpace('<space_id>')\n    * .then((space) => space.createTeamSpaceMembership('team_id', {\n    *   admin: false,\n    *   roles: [\n    *    {\n          sys: {\n    *       type: 'Link',\n    *       linkType: 'Role',\n    *       id: '<role_id>'\n    *      }\n    *    }\n    *   ],\n    * }))\n    * .then((teamSpaceMembership) => console.log(teamSpaceMembership))\n    * .catch(console.error)\n    * ```\n    */\n    createTeamSpaceMembership: function createTeamSpaceMembership(teamId, data) {\n      var raw = this.toPlainObject();\n      return makeRequest({\n        entityType: 'TeamSpaceMembership',\n        action: 'create',\n        params: {\n          spaceId: raw.sys.id,\n          teamId: teamId\n        },\n        payload: data\n      }).then(function (response) {\n        return wrapTeamSpaceMembership(makeRequest, response);\n      });\n    },\n    /**\n     * Gets a Api Key\n     * @param id - API Key ID\n     * @return  Promise for a Api Key\n     * @example ```javascript\n     * const contentful = require('contentful-management')\n     *\n     * const client = contentful.createClient({\n     *   accessToken: '<content_management_api_key>'\n     * })\n     *\n     * client.getSpace('<space_id>')\n     * .then((space) => space.getApiKey('<apikey-id>'))\n     * .then((apikey) => console.log(apikey))\n     * .catch(console.error)\n     * ```\n     */\n    getApiKey: function getApiKey(id) {\n      var raw = this.toPlainObject();\n      return makeRequest({\n        entityType: 'ApiKey',\n        action: 'get',\n        params: {\n          spaceId: raw.sys.id,\n          apiKeyId: id\n        }\n      }).then(function (data) {\n        return wrapApiKey(makeRequest, data);\n      });\n    },\n    /**\n     * Gets a collection of Api Keys\n     * @return Promise for a collection of Api Keys\n     * @example ```javascript\n     * const contentful = require('contentful-management')\n     *\n     * const client = contentful.createClient({\n     *   accessToken: '<content_management_api_key>'\n     * })\n     *\n     * client.getSpace('<space_id>')\n     * .then((space) => space.getApiKeys())\n     * .then((response) => console.log(response.items))\n     * .catch(console.error)\n     * ```\n     */\n    getApiKeys: function getApiKeys() {\n      var raw = this.toPlainObject();\n      return makeRequest({\n        entityType: 'ApiKey',\n        action: 'getMany',\n        params: {\n          spaceId: raw.sys.id\n        }\n      }).then(function (data) {\n        return wrapApiKeyCollection(makeRequest, data);\n      });\n    },\n    /**\n     * Gets a collection of preview Api Keys\n     * @return Promise for a collection of Preview Api Keys\n     * @example ```javascript\n     * const contentful = require('contentful-management')\n     *\n     * const client = contentful.createClient({\n     *   accessToken: '<content_management_api_key>'\n     * })\n     *\n     * client.getSpace('<space_id>')\n     * .then((space) => space.getPreviewApiKeys())\n     * .then((response) => console.log(response.items))\n     * .catch(console.error)\n     * ```\n     */\n    getPreviewApiKeys: function getPreviewApiKeys() {\n      var raw = this.toPlainObject();\n      return makeRequest({\n        entityType: 'PreviewApiKey',\n        action: 'getMany',\n        params: {\n          spaceId: raw.sys.id\n        }\n      }).then(function (data) {\n        return wrapPreviewApiKeyCollection(makeRequest, data);\n      });\n    },\n    /**\n     * Gets a preview Api Key\n     * @param id - Preview API Key ID\n     * @return  Promise for a Preview Api Key\n     * @example ```javascript\n     * const contentful = require('contentful-management')\n     *\n     * const client = contentful.createClient({\n     *   accessToken: '<content_management_api_key>'\n     * })\n     *\n     * client.getSpace('<space_id>')\n     * .then((space) => space.getPreviewApiKey('<preview-apikey-id>'))\n     * .then((previewApikey) => console.log(previewApikey))\n     * .catch(console.error)\n     * ```\n     */\n    getPreviewApiKey: function getPreviewApiKey(id) {\n      var raw = this.toPlainObject();\n      return makeRequest({\n        entityType: 'PreviewApiKey',\n        action: 'get',\n        params: {\n          spaceId: raw.sys.id,\n          previewApiKeyId: id\n        }\n      }).then(function (data) {\n        return wrapPreviewApiKey(makeRequest, data);\n      });\n    },\n    /**\n     * Creates a Api Key\n     * @param payload - Object representation of the Api Key to be created\n     * @return Promise for the newly created Api Key\n     * @example ```javascript\n     * const contentful = require('contentful-management')\n     *\n     * const client = contentful.createClient({\n     *   accessToken: '<content_management_api_key>'\n     * })\n     *\n     * client.getSpace('<space_id>')\n     * .then((space) => space.createApiKey({\n     *   name: 'API Key name',\n     *   environments:[\n     *    {\n     *     sys: {\n     *      type: 'Link'\n     *      linkType: 'Environment',\n     *      id:'<environment_id>'\n     *     }\n     *    }\n     *   ]\n     *   }\n     * }))\n     * .then((apiKey) => console.log(apiKey))\n     * .catch(console.error)\n     * ```\n     */\n    createApiKey: function createApiKey(payload) {\n      var raw = this.toPlainObject();\n      return makeRequest({\n        entityType: 'ApiKey',\n        action: 'create',\n        params: {\n          spaceId: raw.sys.id\n        },\n        payload: payload\n      }).then(function (data) {\n        return wrapApiKey(makeRequest, data);\n      });\n    },\n    /**\n     * Creates a Api Key with a custom ID\n     * @param id - Api Key ID\n     * @param payload - Object representation of the Api Key to be created\n     * @return Promise for the newly created Api Key\n     * @example ```javascript\n     * const contentful = require('contentful-management')\n     *\n     * const client = contentful.createClient({\n     *   accessToken: '<content_management_api_key>'\n     * })\n     *\n     * client.getSpace('<space_id>')\n     * .then((space) => space.createApiKeyWithId('<api-key-id>', {\n     *   name: 'API Key name'\n     *   environments:[\n     *    {\n     *     sys: {\n     *      type: 'Link'\n     *      linkType: 'Environment',\n     *      id:'<environment_id>'\n     *     }\n     *    }\n     *   ]\n     *   }\n     * }))\n     * .then((apiKey) => console.log(apiKey))\n     * .catch(console.error)\n     * ```\n     */\n    createApiKeyWithId: function createApiKeyWithId(id, payload) {\n      var raw = this.toPlainObject();\n      return makeRequest({\n        entityType: 'ApiKey',\n        action: 'createWithId',\n        params: {\n          spaceId: raw.sys.id,\n          apiKeyId: id\n        },\n        payload: payload\n      }).then(function (data) {\n        return wrapApiKey(makeRequest, data);\n      });\n    },\n    /**\n     * Creates an EnvironmentAlias with a custom ID\n     * @param environmentAliasId - EnvironmentAlias ID\n     * @param data - Object representation of the EnvironmentAlias to be created\n     * @return Promise for the newly created EnvironmentAlias\n     * @example ```javascript\n     * const contentful = require('contentful-management')\n     *\n     * const client = contentful.createClient({\n     *   accessToken: '<content_management_api_key>'\n     * })\n     *\n     * client.getSpace('<space_id>')\n     * .then((space) => space.createEnvironmentAliasWithId('<environment-alias-id>', {\n     *   environment: {\n     *     sys: { type: 'Link', linkType: 'Environment', id: 'targetEnvironment' }\n     *   }\n     * }))\n     * .then((environmentAlias) => console.log(environmentAlias))\n     * .catch(console.error)\n     * ```\n     */\n    createEnvironmentAliasWithId: function createEnvironmentAliasWithId(environmentAliasId, data) {\n      var raw = this.toPlainObject();\n      return makeRequest({\n        entityType: 'EnvironmentAlias',\n        action: 'createWithId',\n        params: {\n          spaceId: raw.sys.id,\n          environmentAliasId: environmentAliasId\n        },\n        payload: data\n      }).then(function (response) {\n        return wrapEnvironmentAlias(makeRequest, response);\n      });\n    },\n    /**\n     * Gets an Environment Alias\n     * @param Environment Alias ID\n     * @return Promise for an Environment Alias\n     * @example ```javascript\n     * const contentful = require('contentful-management')\n     *\n     * const client = contentful.createClient({\n     *   accessToken: '<content_management_api_key>'\n     * })\n     *\n     * client.getSpace('<space_id>')\n     * .then((space) => space.getEnvironmentAlias('<alias-id>'))\n     * .then((alias) => console.log(alias))\n     * .catch(console.error)\n     * ```\n     */\n    getEnvironmentAlias: function getEnvironmentAlias(environmentAliasId) {\n      var raw = this.toPlainObject();\n      return makeRequest({\n        entityType: 'EnvironmentAlias',\n        action: 'get',\n        params: {\n          spaceId: raw.sys.id,\n          environmentAliasId: environmentAliasId\n        }\n      }).then(function (data) {\n        return wrapEnvironmentAlias(makeRequest, data);\n      });\n    },\n    /**\n     * Gets a collection of Environment Aliases\n     * @return Promise for a collection of Environment Aliases\n     * @example ```javascript\n     * const contentful = require('contentful-management')\n     *\n     * const client = contentful.createClient({\n     *   accessToken: '<content_management_api_key>'\n     * })\n     *\n     * client.getSpace('<space_id>')\n     * .then((space) => space.getEnvironmentAliases()\n     * .then((response) => console.log(response.items))\n     * .catch(console.error)\n     * ```\n     */\n    getEnvironmentAliases: function getEnvironmentAliases() {\n      var raw = this.toPlainObject();\n      return makeRequest({\n        entityType: 'EnvironmentAlias',\n        action: 'getMany',\n        params: {\n          spaceId: raw.sys.id\n        }\n      }).then(function (data) {\n        return wrapEnvironmentAliasCollection(makeRequest, data);\n      });\n    },\n    /**\n     * Query for scheduled actions in space.\n     * @param query - Object with search parameters. The enviroment id field is mandatory. Check the <a href=\"https://www.contentful.com/developers/docs/references/content-management-api/#/reference/scheduled-actions/scheduled-actions-collection\">REST API reference</a> for more details.\n     * @return Promise for the scheduled actions query\n     *\n     * @example ```javascript\n     *  const contentful = require('contentful-management');\n     *\n     *  const client = contentful.createClient({\n     *    accessToken: '<content_management_api_key>'\n     *  })\n     *\n     *  client.getSpace('<space_id>')\n     *    .then((space) => space.getScheduledActions({\n     *      'environment.sys.id': '<environment_id>',\n     *      'sys.status': 'scheduled'\n     *    }))\n     *    .then((scheduledActionCollection) => console.log(scheduledActionCollection.items))\n     *    .catch(console.error)\n     * ```\n     */\n    getScheduledActions: function getScheduledActions(query) {\n      var raw = this.toPlainObject();\n      return makeRequest({\n        entityType: 'ScheduledAction',\n        action: 'getMany',\n        params: {\n          spaceId: raw.sys.id,\n          query: query\n        }\n      }).then(function (response) {\n        return wrapScheduledActionCollection(makeRequest, response);\n      });\n    },\n    /**\n     * Get a Scheduled Action in the current space by environment and ID.\n     *\n     * @throws if the Scheduled Action cannot be found or the user doesn't have permission to read schedules from the entity of the scheduled action itself.\n     * @returns Promise with the Scheduled Action\n     * @example ```javascript\n     *  const contentful = require('contentful-management');\n     *\n     *  const client = contentful.createClient({\n     *    accessToken: '<content_management_api_key>'\n     *  })\n     *\n     *  client.getSpace('<space_id>')\n     *    .then((space) => space.getScheduledAction({\n     *      scheduledActionId: '<scheduled-action-id>',\n     *      environmentId: '<environmentId>'\n     *    }))\n     *    .then((scheduledAction) => console.log(scheduledAction))\n     *    .catch(console.error)\n     * ```\n     */\n    getScheduledAction: function getScheduledAction(_ref) {\n      var scheduledActionId = _ref.scheduledActionId,\n        environmentId = _ref.environmentId;\n      var space = this.toPlainObject();\n      return makeRequest({\n        entityType: 'ScheduledAction',\n        action: 'get',\n        params: {\n          spaceId: space.sys.id,\n          environmentId: environmentId,\n          scheduledActionId: scheduledActionId\n        }\n      }).then(function (scheduledAction) {\n        return wrapScheduledAction(makeRequest, scheduledAction);\n      });\n    },\n    /**\n     * Creates a scheduled action\n     * @param data - Object representation of the scheduled action to be created\n     * @return Promise for the newly created scheduled actions\n     * @example ```javascript\n     *  const contentful = require('contentful-management');\n     *\n     *  const client = contentful.createClient({\n     *    accessToken: '<content_management_api_key>'\n     *  })\n     *\n     *  client.getSpace('<space_id>')\n     *    .then((space) => space.createScheduledAction({\n     *      entity: {\n     *        sys: {\n     *          type: 'Link',\n     *          linkType: 'Entry',\n     *          id: '<entry_id>'\n     *        }\n     *      },\n     *      environment: {\n     *        sys: {\n     *          type: 'Link',\n     *          linkType: 'Environment',\n     *          id: '<environment_id>'\n     *        }\n     *      },\n     *      action: 'publish',\n     *      scheduledFor: {\n     *        datetime: <ISO_date_string>,\n     *        timezone: 'Europe/Berlin'\n     *      }\n     *    }))\n     *    .then((scheduledAction) => console.log(scheduledAction))\n     *    .catch(console.error)\n     * ```\n     */\n    createScheduledAction: function createScheduledAction(data) {\n      var raw = this.toPlainObject();\n      return makeRequest({\n        entityType: 'ScheduledAction',\n        action: 'create',\n        params: {\n          spaceId: raw.sys.id\n        },\n        payload: data\n      }).then(function (response) {\n        return wrapScheduledAction(makeRequest, response);\n      });\n    },\n    /**\n     * Update a scheduled action\n     * @param {object} options\n     * @param options.scheduledActionId the id of the scheduled action to update\n     * @param options.version the sys.version of the scheduled action to be updated\n     * @param payload the scheduled actions object with updates, omitting sys object\n     * @returns Promise containing a wrapped scheduled action with helper methods\n     * @example ```javascript\n     *  const contentful = require('contentful-management');\n     *\n     *  const client = contentful.createClient({\n     *    accessToken: '<content_management_api_key>'\n     *  })\n     *\n     *  client.getSpace('<space_id>')\n     *    .then((space) => {\n     *      return space.createScheduledAction({\n     *        entity: {\n     *          sys: {\n     *            type: 'Link',\n     *            linkType: 'Entry',\n     *            id: '<entry_id>'\n     *          }\n     *        },\n     *        environment: {\n     *          sys: {\n     *            type: 'Link',\n     *            linkType: 'Environment',\n     *            id: '<environment_id>'\n     *          }\n     *        },\n     *        action: 'publish',\n     *        scheduledFor: {\n     *          datetime: <ISO_date_string>,\n     *          timezone: 'Europe/Berlin'\n     *        }\n     *      })\n     *      .then((scheduledAction) => {\n     *        const { _sys, ...payload } = scheduledAction;\n     *        return space.updateScheduledAction({\n     *          ...payload,\n     *          scheduledFor: {\n     *            ...payload.scheduledFor,\n     *            timezone: 'Europe/Paris'\n     *          }\n     *        })\n     *      })\n     *    .then((scheduledAction) => console.log(scheduledAction))\n     *    .catch(console.error);\n     * ```\n     */\n    updateScheduledAction: function updateScheduledAction(_ref2) {\n      var scheduledActionId = _ref2.scheduledActionId,\n        payload = _ref2.payload,\n        version = _ref2.version;\n      var spaceProps = this.toPlainObject();\n      return makeRequest({\n        entityType: 'ScheduledAction',\n        action: 'update',\n        params: {\n          spaceId: spaceProps.sys.id,\n          version: version,\n          scheduledActionId: scheduledActionId\n        },\n        payload: payload\n      }).then(function (response) {\n        return wrapScheduledAction(makeRequest, response);\n      });\n    },\n    /**\n     * Cancels a Scheduled Action.\n     * Only cancels actions that have not yet executed.\n     *\n     * @param {object} options\n     * @param options.scheduledActionId the id of the scheduled action to be canceled\n     * @param options.environmentId the environment ID of the scheduled action to be canceled\n     * @throws if the Scheduled Action cannot be found or the user doesn't have permissions in the entity in the action.\n     * @returns Promise containing a wrapped Scheduled Action with helper methods\n     * @example ```javascript\n     *  const contentful = require('contentful-management');\n     *\n     *  const client = contentful.createClient({\n     *    accessToken: '<content_management_api_key>'\n     *  })\n     *\n     *  // Given that an Scheduled Action is scheduled\n     *  client.getSpace('<space_id>')\n     *    .then((space) => space.deleteScheduledAction({\n     *        environmentId: '<environment-id>',\n     *        scheduledActionId: '<scheduled-action-id>'\n     *     }))\n     *     // The scheduled Action sys.status is now 'canceled'\n     *    .then((scheduledAction) => console.log(scheduledAction))\n     *    .catch(console.error);\n     * ```\n     */\n    deleteScheduledAction: function deleteScheduledAction(_ref3) {\n      var scheduledActionId = _ref3.scheduledActionId,\n        environmentId = _ref3.environmentId;\n      var spaceProps = this.toPlainObject();\n      return makeRequest({\n        entityType: 'ScheduledAction',\n        action: 'delete',\n        params: {\n          spaceId: spaceProps.sys.id,\n          environmentId: environmentId,\n          scheduledActionId: scheduledActionId\n        }\n      }).then(function (response) {\n        return wrapScheduledAction(makeRequest, response);\n      });\n    }\n  };\n}","map":{"version":3,"names":["createRequestConfig","entities","createSpaceApi","makeRequest","wrapSpace","space","_entities$environment","environment","wrapEnvironment","wrapEnvironmentCollection","_entities$webhook","webhook","wrapWebhook","wrapWebhookCollection","_entities$role","role","wrapRole","wrapRoleCollection","_entities$user","user","wrapUser","wrapUserCollection","_entities$spaceMember","spaceMember","wrapSpaceMember","wrapSpaceMemberCollection","_entities$spaceMember2","spaceMembership","wrapSpaceMembership","wrapSpaceMembershipCollection","_entities$teamSpaceMe","teamSpaceMembership","wrapTeamSpaceMembership","wrapTeamSpaceMembershipCollection","wrapTeamCollection","team","_entities$apiKey","apiKey","wrapApiKey","wrapApiKeyCollection","_entities$environment2","environmentAlias","wrapEnvironmentAlias","wrapEnvironmentAliasCollection","_entities$previewApiK","previewApiKey","wrapPreviewApiKey","wrapPreviewApiKeyCollection","_entities$scheduledAc","scheduledAction","wrapScheduledAction","wrapScheduledActionCollection","deleteSpace","raw","toPlainObject","entityType","action","params","spaceId","sys","id","update","updateSpace","payload","headers","then","data","getEnvironment","environmentId","getEnvironments","query","arguments","length","undefined","createEnvironment","response","createEnvironmentWithId","sourceEnvironmentId","getWebhook","webhookDefinitionId","getWebhooks","createWebhook","createWebhookWithId","getRole","roleId","getRoles","createRole","createRoleWithId","roleData","getSpaceUser","userId","getSpaceUsers","getTeams","limit","getSpaceMember","spaceMemberId","getSpaceMembers","getSpaceMembership","spaceMembershipId","getSpaceMemberships","createSpaceMembership","createSpaceMembershipWithId","getTeamSpaceMembership","teamSpaceMembershipId","getTeamSpaceMemberships","createTeamSpaceMembership","teamId","getApiKey","apiKeyId","getApiKeys","getPreviewApiKeys","getPreviewApiKey","previewApiKeyId","createApiKey","createApiKeyWithId","createEnvironmentAliasWithId","environmentAliasId","getEnvironmentAlias","getEnvironmentAliases","getScheduledActions","getScheduledAction","_ref","scheduledActionId","createScheduledAction","updateScheduledAction","_ref2","version","spaceProps","deleteScheduledAction","_ref3"],"sources":["C:/Users/hrith/OneDrive/Desktop/medcertificates-main/node_modules/contentful-management/dist/es-modules/create-space-api.js"],"sourcesContent":["/**\n * Contentful Space API. Contains methods to access any operations at a space\n * level, such as creating and reading entities contained in a space.\n */\nimport { createRequestConfig } from 'contentful-sdk-core';\nimport entities from './entities';\n\n/**\n * Creates API object with methods to access the Space API\n * @param {MakeRequest} makeRequest - function to make requests via an adapter\n * @return {ContentfulSpaceAPI}\n * @private\n */\nexport default function createSpaceApi(makeRequest) {\n  var wrapSpace = entities.space.wrapSpace;\n  var _entities$environment = entities.environment,\n      wrapEnvironment = _entities$environment.wrapEnvironment,\n      wrapEnvironmentCollection = _entities$environment.wrapEnvironmentCollection;\n  var _entities$webhook = entities.webhook,\n      wrapWebhook = _entities$webhook.wrapWebhook,\n      wrapWebhookCollection = _entities$webhook.wrapWebhookCollection;\n  var _entities$role = entities.role,\n      wrapRole = _entities$role.wrapRole,\n      wrapRoleCollection = _entities$role.wrapRoleCollection;\n  var _entities$user = entities.user,\n      wrapUser = _entities$user.wrapUser,\n      wrapUserCollection = _entities$user.wrapUserCollection;\n  var _entities$spaceMember = entities.spaceMember,\n      wrapSpaceMember = _entities$spaceMember.wrapSpaceMember,\n      wrapSpaceMemberCollection = _entities$spaceMember.wrapSpaceMemberCollection;\n  var _entities$spaceMember2 = entities.spaceMembership,\n      wrapSpaceMembership = _entities$spaceMember2.wrapSpaceMembership,\n      wrapSpaceMembershipCollection = _entities$spaceMember2.wrapSpaceMembershipCollection;\n  var _entities$teamSpaceMe = entities.teamSpaceMembership,\n      wrapTeamSpaceMembership = _entities$teamSpaceMe.wrapTeamSpaceMembership,\n      wrapTeamSpaceMembershipCollection = _entities$teamSpaceMe.wrapTeamSpaceMembershipCollection;\n  var wrapTeamCollection = entities.team.wrapTeamCollection;\n  var _entities$apiKey = entities.apiKey,\n      wrapApiKey = _entities$apiKey.wrapApiKey,\n      wrapApiKeyCollection = _entities$apiKey.wrapApiKeyCollection;\n  var _entities$environment2 = entities.environmentAlias,\n      wrapEnvironmentAlias = _entities$environment2.wrapEnvironmentAlias,\n      wrapEnvironmentAliasCollection = _entities$environment2.wrapEnvironmentAliasCollection;\n  var _entities$previewApiK = entities.previewApiKey,\n      wrapPreviewApiKey = _entities$previewApiK.wrapPreviewApiKey,\n      wrapPreviewApiKeyCollection = _entities$previewApiK.wrapPreviewApiKeyCollection;\n  var _entities$scheduledAc = entities.scheduledAction,\n      wrapScheduledAction = _entities$scheduledAc.wrapScheduledAction,\n      wrapScheduledActionCollection = _entities$scheduledAc.wrapScheduledActionCollection;\n  return {\n    /**\n     * Deletes the space\n     * @return Promise for the deletion. It contains no data, but the Promise error case should be handled.\n     * @example ```javascript\n     * const contentful = require('contentful-management')\n     *\n     * const client = contentful.createClient({\n     *   accessToken: '<content_management_api_key>'\n     * })\n     *\n     * client.getSpace('<space_id>')\n     *   .then((space) => space.delete())\n     *   .then(() => console.log('Space deleted.'))\n     *   .catch(console.error)\n     * ```\n     */\n    \"delete\": function deleteSpace() {\n      var raw = this.toPlainObject();\n      return makeRequest({\n        entityType: 'Space',\n        action: 'delete',\n        params: {\n          spaceId: raw.sys.id\n        }\n      });\n    },\n\n    /**\n     * Updates the space\n     * @return Promise for the updated space.\n     * @example ```javascript\n     * const contentful = require('contentful-management')\n     *\n     * const client = contentful.createClient({\n     *   accessToken: '<content_management_api_key>'\n     * })\n     *\n     * client.getSpace('<space_id>')\n     * .then((space) => {\n     *   space.name = 'New name'\n     *   return space.update()\n     * })\n     * .then((space) => console.log(`Space ${space.sys.id} renamed.`)\n     * .catch(console.error)\n     * ```\n     */\n    update: function updateSpace() {\n      var raw = this.toPlainObject();\n      return makeRequest({\n        entityType: 'Space',\n        action: 'update',\n        params: {\n          spaceId: raw.sys.id\n        },\n        payload: raw,\n        headers: {}\n      }).then(function (data) {\n        return wrapSpace(makeRequest, data);\n      });\n    },\n\n    /**\n     * Gets an environment\n     * @param id - Environment ID\n     * @return Promise for an Environment\n     * @example ```javascript\n     * const contentful = require('contentful-management')\n     *\n     * const client = contentful.createClient({\n     *   accessToken: '<content_management_api_key>'\n     * })\n     *\n     * client.getSpace('<space_id>')\n     * .then((space) => space.getEnvironment('<environement_id>'))\n     * .then((environment) => console.log(environment))\n     * .catch(console.error)\n     * ```\n     */\n    getEnvironment: function getEnvironment(environmentId) {\n      var raw = this.toPlainObject();\n      return makeRequest({\n        entityType: 'Environment',\n        action: 'get',\n        params: {\n          spaceId: raw.sys.id,\n          environmentId: environmentId\n        }\n      }).then(function (data) {\n        return wrapEnvironment(makeRequest, data);\n      });\n    },\n\n    /**\n     * Gets a collection of Environments\n     * @return Promise for a collection of Environment\n     * @example ```javascript\n     * const contentful = require('contentful-management')\n     *\n     * const client = contentful.createClient({\n     *   accessToken: '<content_management_api_key>'\n     * })\n     *\n     * client.getSpace('<space_id>')\n     * .then((space) => space.getEnvironments())\n     * .then((response) => console.log(response.items))\n     * .catch(console.error)\n     * ```\n     */\n    getEnvironments: function getEnvironments() {\n      var query = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      var raw = this.toPlainObject();\n      return makeRequest({\n        entityType: 'Environment',\n        action: 'getMany',\n        params: {\n          spaceId: raw.sys.id,\n          query: query\n        }\n      }).then(function (data) {\n        return wrapEnvironmentCollection(makeRequest, data);\n      });\n    },\n\n    /**\n     * Creates an Environement\n     * @param data - Object representation of the Environment to be created\n     * @return Promise for the newly created Environment\n     * @example ```javascript\n     * const contentful = require('contentful-management')\n     *\n     * const client = contentful.createClient({\n     *   accessToken: '<content_management_api_key>'\n     * })\n     *\n     * client.getSpace('<space_id>')\n     * .then((space) => space.createEnvironment({ name: 'Staging' }))\n     * .then((environment) => console.log(environment))\n     * .catch(console.error)\n     * ```\n     */\n    createEnvironment: function createEnvironment() {\n      var data = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      var raw = this.toPlainObject();\n      return makeRequest({\n        entityType: 'Environment',\n        action: 'create',\n        params: {\n          spaceId: raw.sys.id\n        },\n        payload: data\n      }).then(function (response) {\n        return wrapEnvironment(makeRequest, response);\n      });\n    },\n\n    /**\n     * Creates an Environment with a custom ID\n     * @param id - Environment ID\n     * @param data - Object representation of the Environment to be created\n     * @param sourceEnvironmentId - ID of the source environment that will be copied to create the new environment. Default is \"master\"\n     * @return Promise for the newly created Environment\n     * @example ```javascript\n     * const contentful = require('contentful-management')\n     *\n     * const client = contentful.createClient({\n     *   accessToken: '<content_management_api_key>'\n     * })\n     *\n     * client.getSpace('<space_id>')\n     * .then((space) => space.createEnvironmentWithId('<environment-id>', { name: 'Staging'}, 'master'))\n     * .then((environment) => console.log(environment))\n     * .catch(console.error)\n     * ```\n     */\n    createEnvironmentWithId: function createEnvironmentWithId(id, data, sourceEnvironmentId) {\n      var raw = this.toPlainObject();\n      return makeRequest({\n        entityType: 'Environment',\n        action: 'createWithId',\n        params: {\n          spaceId: raw.sys.id,\n          environmentId: id,\n          sourceEnvironmentId: sourceEnvironmentId\n        },\n        payload: data\n      }).then(function (response) {\n        return wrapEnvironment(makeRequest, response);\n      });\n    },\n\n    /**\n     * Gets a Webhook\n     * @param id - Webhook ID\n     * @return Promise for a Webhook\n     * @example ```javascript\n     * const contentful = require('contentful-management')\n     *\n     * const client = contentful.createClient({\n     *   accessToken: '<content_management_api_key>'\n     * })\n     *\n     * client.getSpace('<space_id>')\n     * .then((space) => space.getWebhook('<webhook_id>'))\n     * .then((webhook) => console.log(webhook))\n     * .catch(console.error)\n     * ```\n     */\n    getWebhook: function getWebhook(id) {\n      var raw = this.toPlainObject();\n      return makeRequest({\n        entityType: 'Webhook',\n        action: 'get',\n        params: {\n          spaceId: raw.sys.id,\n          webhookDefinitionId: id\n        }\n      }).then(function (data) {\n        return wrapWebhook(makeRequest, data);\n      });\n    },\n\n    /**\n     * Gets a collection of Webhooks\n     * @return Promise for a collection of Webhooks\n     * @example ```javascript\n     * const contentful = require('contentful-management')\n     *\n     * const client = contentful.createClient({\n     *   accessToken: '<content_management_api_key>'\n     * })\n     *\n     * client.getSpace('<space_id>')\n     * .then((space) => space.getWebhooks())\n     * .then((response) => console.log(response.items))\n     * .catch(console.error)\n     * ```\n     */\n    getWebhooks: function getWebhooks() {\n      var raw = this.toPlainObject();\n      return makeRequest({\n        entityType: 'Webhook',\n        action: 'getMany',\n        params: {\n          spaceId: raw.sys.id\n        }\n      }).then(function (data) {\n        return wrapWebhookCollection(makeRequest, data);\n      });\n    },\n\n    /**\n     * Creates a Webhook\n     * @param data - Object representation of the Webhook to be created\n     * @return Promise for the newly created Webhook\n     * @example ```javascript\n     * const contentful = require('contentful-management')\n     *\n     * client.getSpace('<space_id>')\n     * .then((space) => space.createWebhook({\n     *   'name': 'My webhook',\n     *   'url': 'https://www.example.com/test',\n     *   'topics': [\n     *     'Entry.create',\n     *     'ContentType.create',\n     *     '*.publish',\n     *     'Asset.*'\n     *   ]\n     * }))\n     * .then((webhook) => console.log(webhook))\n     * .catch(console.error)\n     * ```\n     */\n    createWebhook: function createWebhook(data) {\n      var raw = this.toPlainObject();\n      return makeRequest({\n        entityType: 'Webhook',\n        action: 'create',\n        params: {\n          spaceId: raw.sys.id\n        },\n        payload: data\n      }).then(function (data) {\n        return wrapWebhook(makeRequest, data);\n      });\n    },\n\n    /**\n     * Creates a Webhook with a custom ID\n     * @param id - Webhook ID\n     * @param  data - Object representation of the Webhook to be created\n     * @return Promise for the newly created Webhook\n     * @example ```javascript\n     * const contentful = require('contentful-management')\n     *\n     * client.getSpace('<space_id>')\n     * .then((space) => space.createWebhookWithId('<webhook_id>', {\n     *   'name': 'My webhook',\n     *   'url': 'https://www.example.com/test',\n     *   'topics': [\n     *     'Entry.create',\n     *     'ContentType.create',\n     *     '*.publish',\n     *     'Asset.*'\n     *   ]\n     * }))\n     * .then((webhook) => console.log(webhook))\n     * .catch(console.error)\n     * ```\n     */\n    createWebhookWithId: function createWebhookWithId(id, data) {\n      var raw = this.toPlainObject();\n      return makeRequest({\n        entityType: 'Webhook',\n        action: 'createWithId',\n        params: {\n          spaceId: raw.sys.id,\n          webhookDefinitionId: id\n        },\n        payload: data\n      }).then(function (data) {\n        return wrapWebhook(makeRequest, data);\n      });\n    },\n\n    /**\n     * Gets a Role\n     * @param id - Role ID\n     * @return Promise for a Role\n     * @example ```javascript\n     * const contentful = require('contentful-management')\n     *\n     * const client = contentful.createClient({\n     *   accessToken: '<content_management_api_key>'\n     * })\n     *\n     * client.getSpace('<space_id>')\n     * .then((space) => space.createRole({\n     *   fields: {\n     *     title: {\n     *       'en-US': 'Role title'\n     *     }\n     *   }\n     * }))\n     * .then((role) => console.log(role))\n     * .catch(console.error)\n     * ```\n     */\n    getRole: function getRole(id) {\n      var raw = this.toPlainObject();\n      return makeRequest({\n        entityType: 'Role',\n        action: 'get',\n        params: {\n          spaceId: raw.sys.id,\n          roleId: id\n        }\n      }).then(function (data) {\n        return wrapRole(makeRequest, data);\n      });\n    },\n\n    /**\n     * Gets a collection of Roles\n     * @return Promise for a collection of Roles\n     * @example ```javascript\n     * const contentful = require('contentful-management')\n     *\n     * const client = contentful.createClient({\n     *   accessToken: '<content_management_api_key>'\n     * })\n     *\n     * client.getSpace('<space_id>')\n     * .then((space) => space.getRoles())\n     * .then((response) => console.log(response.items))\n     * .catch(console.error)\n     * ```\n     */\n    getRoles: function getRoles() {\n      var query = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      var raw = this.toPlainObject();\n      return makeRequest({\n        entityType: 'Role',\n        action: 'getMany',\n        params: {\n          spaceId: raw.sys.id,\n          query: createRequestConfig({\n            query: query\n          }).params\n        }\n      }).then(function (data) {\n        return wrapRoleCollection(makeRequest, data);\n      });\n    },\n\n    /**\n     * Creates a Role\n     * @param data - Object representation of the Role to be created\n     * @return  Promise for the newly created Role\n     * @example ```javascript\n     * const contentful = require('contentful-management')\n     *\n     * const client = contentful.createClient({\n     *   accessToken: '<content_management_api_key>'\n     * })\n     * client.getSpace('<space_id>')\n     * .then((space) => space.createRole({\n     *   name: 'My Role',\n     *   description: 'foobar role',\n     *   permissions: {\n     *     ContentDelivery: 'all',\n     *     ContentModel: ['read'],\n     *     Settings: []\n     *   },\n     *   policies: [\n     *     {\n     *       effect: 'allow',\n     *       actions: 'all',\n     *       constraint: {\n     *         and: [\n     *           {\n     *             equals: [\n     *               { doc: 'sys.type' },\n     *               'Entry'\n     *             ]\n     *           },\n     *           {\n     *             equals: [\n     *               { doc: 'sys.type' },\n     *               'Asset'\n     *             ]\n     *           }\n     *         ]\n     *       }\n     *     }\n     *   ]\n     * }))\n     * .then((role) => console.log(role))\n     * .catch(console.error)\n     * ```\n     */\n    createRole: function createRole(data) {\n      var raw = this.toPlainObject();\n      return makeRequest({\n        entityType: 'Role',\n        action: 'create',\n        params: {\n          spaceId: raw.sys.id\n        },\n        payload: data\n      }).then(function (data) {\n        return wrapRole(makeRequest, data);\n      });\n    },\n\n    /**\n     * Creates a Role with a custom ID\n     * @param id - Role ID\n     * @param data - Object representation of the Role to be created\n     * @return Promise for the newly created Role\n     * @example ```javascript\n     * const contentful = require('contentful-management')\n     *\n     * const client = contentful.createClient({\n     *   accessToken: '<content_management_api_key>'\n     * })\n     * client.getSpace('<space_id>')\n     * .then((space) => space.createRoleWithId('<role-id>', {\n     *   name: 'My Role',\n     *   description: 'foobar role',\n     *   permissions: {\n     *     ContentDelivery: 'all',\n     *     ContentModel: ['read'],\n     *     Settings: []\n     *   },\n     *   policies: [\n     *     {\n     *       effect: 'allow',\n     *       actions: 'all',\n     *       constraint: {\n     *         and: [\n     *           {\n     *             equals: [\n     *               { doc: 'sys.type' },\n     *               'Entry'\n     *             ]\n     *           },\n     *           {\n     *             equals: [\n     *               { doc: 'sys.type' },\n     *               'Asset'\n     *             ]\n     *           }\n     *         ]\n     *       }\n     *     }\n     *   ]\n     * }))\n     * .then((role) => console.log(role))\n     * .catch(console.error)\n     * ```\n     */\n    createRoleWithId: function createRoleWithId(id, roleData) {\n      var raw = this.toPlainObject();\n      return makeRequest({\n        entityType: 'Role',\n        action: 'createWithId',\n        params: {\n          spaceId: raw.sys.id,\n          roleId: id\n        },\n        payload: roleData\n      }).then(function (data) {\n        return wrapRole(makeRequest, data);\n      });\n    },\n\n    /**\n     * Gets a User\n     * @param userId - User ID\n     * @return Promise for a User\n     * @example ```javascript\n     * const contentful = require('contentful-management')\n     *\n     * client.getSpace('<space_id>')\n     * .then((space) => space.getSpaceUser('id'))\n     * .then((user) => console.log(user))\n     * .catch(console.error)\n     * ```\n     */\n    getSpaceUser: function getSpaceUser(userId) {\n      var raw = this.toPlainObject();\n      return makeRequest({\n        entityType: 'User',\n        action: 'getForSpace',\n        params: {\n          spaceId: raw.sys.id,\n          userId: userId\n        }\n      }).then(function (data) {\n        return wrapUser(makeRequest, data);\n      });\n    },\n\n    /**\n     * Gets a collection of Users in a space\n     * @param query - Object with search parameters. Check the <a href=\"https://www.contentful.com/developers/docs/javascript/tutorials/using-js-cda-sdk/#retrieving-entries-with-search-parameters\">JS SDK tutorial</a> and the <a href=\"https://www.contentful.com/developers/docs/references/content-delivery-api/#/reference/search-parameters\">REST API reference</a> for more details.\n     * @return Promise a collection of Users in a space\n     * @example ```javascript\n     * const contentful = require('contentful-management')\n     *\n     * client.getSpace('<space_id>')\n     * .then((space) => space.getSpaceUsers(query))\n     * .then((data) => console.log(data))\n     * .catch(console.error)\n     * ```\n     */\n    getSpaceUsers: function getSpaceUsers() {\n      var query = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      var raw = this.toPlainObject();\n      return makeRequest({\n        entityType: 'User',\n        action: 'getManyForSpace',\n        params: {\n          spaceId: raw.sys.id,\n          query: createRequestConfig({\n            query: query\n          }).params\n        }\n      }).then(function (data) {\n        return wrapUserCollection(makeRequest, data);\n      });\n    },\n\n    /**\n     * Gets a collection of teams for a space\n     * @param query\n     * @return Promise for a collection of teams for a space\n     * @example ```javascript\n     * const contentful = require('contentful-management')\n     *\n     * client.getSpace('<space_id>')\n     * .then((space) => space.getTeams())\n     * .then((teamsCollection) => console.log(teamsCollection))\n     * .catch(console.error)\n     * ```\n     */\n    getTeams: function getTeams() {\n      var query = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {\n        limit: 100\n      };\n      var raw = this.toPlainObject();\n      return makeRequest({\n        entityType: 'Team',\n        action: 'getManyForSpace',\n        params: {\n          spaceId: raw.sys.id,\n          query: createRequestConfig({\n            query: query\n          }).params\n        }\n      }).then(function (data) {\n        return wrapTeamCollection(makeRequest, data);\n      });\n    },\n\n    /**\n     * Gets a Space Member\n     * @param id Get Space Member by user_id\n     * @return Promise for a Space Member\n     * @example ```javascript\n     * const contentful = require('contentful-management')\n     *\n     * client.getSpace('<space_id>')\n     * .then((space) => space.getSpaceMember(id))\n     * .then((spaceMember) => console.log(spaceMember))\n     * .catch(console.error)\n     * ```\n     */\n    getSpaceMember: function getSpaceMember(id) {\n      var raw = this.toPlainObject();\n      return makeRequest({\n        entityType: 'SpaceMember',\n        action: 'get',\n        params: {\n          spaceId: raw.sys.id,\n          spaceMemberId: id\n        }\n      }).then(function (data) {\n        return wrapSpaceMember(makeRequest, data);\n      });\n    },\n\n    /**\n     * Gets a collection of Space Members\n     * @param query\n     * @return Promise for a collection of Space Members\n     * @example ```javascript\n     * const contentful = require('contentful-management')\n     *\n     * client.getSpace('<space_id>')\n     * .then((space) => space.getSpaceMembers({'limit': 100}))\n     * .then((spaceMemberCollection) => console.log(spaceMemberCollection))\n     * .catch(console.error)\n     * ```\n     */\n    getSpaceMembers: function getSpaceMembers() {\n      var query = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      var raw = this.toPlainObject();\n      return makeRequest({\n        entityType: 'SpaceMember',\n        action: 'getMany',\n        params: {\n          spaceId: raw.sys.id,\n          query: createRequestConfig({\n            query: query\n          }).params\n        }\n      }).then(function (data) {\n        return wrapSpaceMemberCollection(makeRequest, data);\n      });\n    },\n\n    /**\n     * Gets a Space Membership\n     * Warning: the user attribute in the space membership root is deprecated. The attribute has been moved inside the sys  object (i.e. sys.user).\n     * @param id - Space Membership ID\n     * @return Promise for a Space Membership\n     * @example ```javascript\n     * const contentful = require('contentful-management')\n     *\n     * client.getSpace('<space_id>')\n     * .then((space) => space.getSpaceMembership('id'))\n     * .then((spaceMembership) => console.log(spaceMembership))\n     * .catch(console.error)\n     * ```\n     */\n    getSpaceMembership: function getSpaceMembership(id) {\n      var raw = this.toPlainObject();\n      return makeRequest({\n        entityType: 'SpaceMembership',\n        action: 'get',\n        params: {\n          spaceId: raw.sys.id,\n          spaceMembershipId: id\n        }\n      }).then(function (data) {\n        return wrapSpaceMembership(makeRequest, data);\n      });\n    },\n\n    /**\n     * Gets a collection of Space Memberships\n     * Warning: the user attribute in the space membership root is deprecated. The attribute has been moved inside the sys  object (i.e. sys.user).\n     * @param query - Object with search parameters. Check the <a href=\"https://www.contentful.com/developers/docs/javascript/tutorials/using-js-cda-sdk/#retrieving-entries-with-search-parameters\">JS SDK tutorial</a> and the <a href=\"https://www.contentful.com/developers/docs/references/content-delivery-api/#/reference/search-parameters\">REST API reference</a> for more details.\n     * @return Promise for a collection of Space Memberships\n     * @example ```javascript\n     * const contentful = require('contentful-management')\n     *\n     * client.getSpace('<space_id>')\n     * .then((space) => space.getSpaceMemberships({'limit': 100})) // you can add more queries as 'key': 'value'\n     * .then((response) => console.log(response.items))\n     * .catch(console.error)\n     * ```\n     */\n    getSpaceMemberships: function getSpaceMemberships() {\n      var query = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      var raw = this.toPlainObject();\n      return makeRequest({\n        entityType: 'SpaceMembership',\n        action: 'getMany',\n        params: {\n          spaceId: raw.sys.id,\n          query: createRequestConfig({\n            query: query\n          }).params\n        }\n      }).then(function (data) {\n        return wrapSpaceMembershipCollection(makeRequest, data);\n      });\n    },\n\n    /**\n     * Creates a Space Membership\n     * Warning: the user attribute in the space membership root is deprecated. The attribute has been moved inside the sys  object (i.e. sys.user).\n     * @param  data - Object representation of the Space Membership to be created\n     * @return Promise for the newly created Space Membership\n     * @example ```javascript\n     * const contentful = require('contentful-management')\n     *\n     * const client = contentful.createClient({\n     *   accessToken: '<content_management_api_key>'\n     * })\n     *\n     * client.getSpace('<space_id>')\n     * .then((space) => space.createSpaceMembership({\n     *   admin: false,\n     *   roles: [\n     *     {\n     *       type: 'Link',\n     *       linkType: 'Role',\n     *       id: '<role_id>'\n     *     }\n     *   ],\n     *   email: 'foo@example.com'\n     * }))\n     * .then((spaceMembership) => console.log(spaceMembership))\n     * .catch(console.error)\n     * ```\n     */\n    createSpaceMembership: function createSpaceMembership(data) {\n      var raw = this.toPlainObject();\n      return makeRequest({\n        entityType: 'SpaceMembership',\n        action: 'create',\n        params: {\n          spaceId: raw.sys.id\n        },\n        payload: data\n      }).then(function (response) {\n        return wrapSpaceMembership(makeRequest, response);\n      });\n    },\n\n    /**\n     * Creates a Space Membership with a custom ID\n     * Warning: the user attribute in the space membership root is deprecated. The attribute has been moved inside the sys  object (i.e. sys.user).\n     * @param id - Space Membership ID\n     * @param data - Object representation of the Space Membership to be created\n     * @return Promise for the newly created Space Membership\n     * @example ```javascript\n     * const contentful = require('contentful-management')\n     *\n     * const client = contentful.createClient({\n     *   accessToken: '<content_management_api_key>'\n     * })\n     *\n     * client.getSpace('<space_id>')\n     * .then((space) => space.createSpaceMembershipWithId('<space-membership-id>', {\n     *   admin: false,\n     *   roles: [\n     *     {\n     *       type: 'Link',\n     *       linkType: 'Role',\n     *       id: '<role_id>'\n     *     }\n     *   ],\n     *   email: 'foo@example.com'\n     * }))\n     * .then((spaceMembership) => console.log(spaceMembership))\n     * .catch(console.error)\n     * ```\n     */\n    createSpaceMembershipWithId: function createSpaceMembershipWithId(id, data) {\n      var raw = this.toPlainObject();\n      return makeRequest({\n        entityType: 'SpaceMembership',\n        action: 'createWithId',\n        params: {\n          spaceId: raw.sys.id,\n          spaceMembershipId: id\n        },\n        payload: data\n      }).then(function (response) {\n        return wrapSpaceMembership(makeRequest, response);\n      });\n    },\n\n    /**\n     * Gets a Team Space Membership\n     * @param id - Team Space Membership ID\n     * @return Promise for a Team Space Membership\n     * @example ```javascript\n     * const contentful = require('contentful-management')\n     *\n     * client.getSpace('<space_id>')\n     * .then((space) => space.getTeamSpaceMembership('team_space_membership_id'))\n     * .then((teamSpaceMembership) => console.log(teamSpaceMembership))\n     * .catch(console.error)\n     * ```\n     */\n    getTeamSpaceMembership: function getTeamSpaceMembership(teamSpaceMembershipId) {\n      var raw = this.toPlainObject();\n      return makeRequest({\n        entityType: 'TeamSpaceMembership',\n        action: 'get',\n        params: {\n          spaceId: raw.sys.id,\n          teamSpaceMembershipId: teamSpaceMembershipId\n        }\n      }).then(function (data) {\n        return wrapTeamSpaceMembership(makeRequest, data);\n      });\n    },\n\n    /**\n     * Gets a collection of Team Space Memberships\n     * @param query - Object with search parameters. Check the <a href=\"https://www.contentful.com/developers/docs/javascript/tutorials/using-js-cda-sdk/#retrieving-entries-with-search-parameters\">JS SDK tutorial</a> and the <a href=\"https://www.contentful.com/developers/docs/references/content-delivery-api/#/reference/search-parameters\">REST API reference</a> for more details.\n     * @return Promise for a collection of Team Space Memberships\n     * @example ```javascript\n     * const contentful = require('contentful-management')\n     *\n     * client.getSpace('<space_id>')\n     * .then((space) => space.getTeamSpaceMemberships())\n     * .then((response) => console.log(response.items))\n     * .catch(console.error)\n     * ```\n     */\n    getTeamSpaceMemberships: function getTeamSpaceMemberships() {\n      var query = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      var raw = this.toPlainObject();\n      return makeRequest({\n        entityType: 'TeamSpaceMembership',\n        action: 'getMany',\n        params: {\n          spaceId: raw.sys.id,\n          query: createRequestConfig({\n            query: query\n          }).params\n        }\n      }).then(function (data) {\n        return wrapTeamSpaceMembershipCollection(makeRequest, data);\n      });\n    },\n\n    /**\n    * Creates a Team Space Membership\n    * @param id - Team ID\n    * @param data - Object representation of the Team Space Membership to be created\n    * @return Promise for the newly created Team Space Membership\n    * @example ```javascript\n    * const contentful = require('contentful-management')\n    *\n    * const client = contentful.createClient({\n    *   accessToken: '<content_management_api_key>'\n    * })\n    *\n    * client.getSpace('<space_id>')\n    * .then((space) => space.createTeamSpaceMembership('team_id', {\n    *   admin: false,\n    *   roles: [\n    *    {\n          sys: {\n    *       type: 'Link',\n    *       linkType: 'Role',\n    *       id: '<role_id>'\n    *      }\n    *    }\n    *   ],\n    * }))\n    * .then((teamSpaceMembership) => console.log(teamSpaceMembership))\n    * .catch(console.error)\n    * ```\n    */\n    createTeamSpaceMembership: function createTeamSpaceMembership(teamId, data) {\n      var raw = this.toPlainObject();\n      return makeRequest({\n        entityType: 'TeamSpaceMembership',\n        action: 'create',\n        params: {\n          spaceId: raw.sys.id,\n          teamId: teamId\n        },\n        payload: data\n      }).then(function (response) {\n        return wrapTeamSpaceMembership(makeRequest, response);\n      });\n    },\n\n    /**\n     * Gets a Api Key\n     * @param id - API Key ID\n     * @return  Promise for a Api Key\n     * @example ```javascript\n     * const contentful = require('contentful-management')\n     *\n     * const client = contentful.createClient({\n     *   accessToken: '<content_management_api_key>'\n     * })\n     *\n     * client.getSpace('<space_id>')\n     * .then((space) => space.getApiKey('<apikey-id>'))\n     * .then((apikey) => console.log(apikey))\n     * .catch(console.error)\n     * ```\n     */\n    getApiKey: function getApiKey(id) {\n      var raw = this.toPlainObject();\n      return makeRequest({\n        entityType: 'ApiKey',\n        action: 'get',\n        params: {\n          spaceId: raw.sys.id,\n          apiKeyId: id\n        }\n      }).then(function (data) {\n        return wrapApiKey(makeRequest, data);\n      });\n    },\n\n    /**\n     * Gets a collection of Api Keys\n     * @return Promise for a collection of Api Keys\n     * @example ```javascript\n     * const contentful = require('contentful-management')\n     *\n     * const client = contentful.createClient({\n     *   accessToken: '<content_management_api_key>'\n     * })\n     *\n     * client.getSpace('<space_id>')\n     * .then((space) => space.getApiKeys())\n     * .then((response) => console.log(response.items))\n     * .catch(console.error)\n     * ```\n     */\n    getApiKeys: function getApiKeys() {\n      var raw = this.toPlainObject();\n      return makeRequest({\n        entityType: 'ApiKey',\n        action: 'getMany',\n        params: {\n          spaceId: raw.sys.id\n        }\n      }).then(function (data) {\n        return wrapApiKeyCollection(makeRequest, data);\n      });\n    },\n\n    /**\n     * Gets a collection of preview Api Keys\n     * @return Promise for a collection of Preview Api Keys\n     * @example ```javascript\n     * const contentful = require('contentful-management')\n     *\n     * const client = contentful.createClient({\n     *   accessToken: '<content_management_api_key>'\n     * })\n     *\n     * client.getSpace('<space_id>')\n     * .then((space) => space.getPreviewApiKeys())\n     * .then((response) => console.log(response.items))\n     * .catch(console.error)\n     * ```\n     */\n    getPreviewApiKeys: function getPreviewApiKeys() {\n      var raw = this.toPlainObject();\n      return makeRequest({\n        entityType: 'PreviewApiKey',\n        action: 'getMany',\n        params: {\n          spaceId: raw.sys.id\n        }\n      }).then(function (data) {\n        return wrapPreviewApiKeyCollection(makeRequest, data);\n      });\n    },\n\n    /**\n     * Gets a preview Api Key\n     * @param id - Preview API Key ID\n     * @return  Promise for a Preview Api Key\n     * @example ```javascript\n     * const contentful = require('contentful-management')\n     *\n     * const client = contentful.createClient({\n     *   accessToken: '<content_management_api_key>'\n     * })\n     *\n     * client.getSpace('<space_id>')\n     * .then((space) => space.getPreviewApiKey('<preview-apikey-id>'))\n     * .then((previewApikey) => console.log(previewApikey))\n     * .catch(console.error)\n     * ```\n     */\n    getPreviewApiKey: function getPreviewApiKey(id) {\n      var raw = this.toPlainObject();\n      return makeRequest({\n        entityType: 'PreviewApiKey',\n        action: 'get',\n        params: {\n          spaceId: raw.sys.id,\n          previewApiKeyId: id\n        }\n      }).then(function (data) {\n        return wrapPreviewApiKey(makeRequest, data);\n      });\n    },\n\n    /**\n     * Creates a Api Key\n     * @param payload - Object representation of the Api Key to be created\n     * @return Promise for the newly created Api Key\n     * @example ```javascript\n     * const contentful = require('contentful-management')\n     *\n     * const client = contentful.createClient({\n     *   accessToken: '<content_management_api_key>'\n     * })\n     *\n     * client.getSpace('<space_id>')\n     * .then((space) => space.createApiKey({\n     *   name: 'API Key name',\n     *   environments:[\n     *    {\n     *     sys: {\n     *      type: 'Link'\n     *      linkType: 'Environment',\n     *      id:'<environment_id>'\n     *     }\n     *    }\n     *   ]\n     *   }\n     * }))\n     * .then((apiKey) => console.log(apiKey))\n     * .catch(console.error)\n     * ```\n     */\n    createApiKey: function createApiKey(payload) {\n      var raw = this.toPlainObject();\n      return makeRequest({\n        entityType: 'ApiKey',\n        action: 'create',\n        params: {\n          spaceId: raw.sys.id\n        },\n        payload: payload\n      }).then(function (data) {\n        return wrapApiKey(makeRequest, data);\n      });\n    },\n\n    /**\n     * Creates a Api Key with a custom ID\n     * @param id - Api Key ID\n     * @param payload - Object representation of the Api Key to be created\n     * @return Promise for the newly created Api Key\n     * @example ```javascript\n     * const contentful = require('contentful-management')\n     *\n     * const client = contentful.createClient({\n     *   accessToken: '<content_management_api_key>'\n     * })\n     *\n     * client.getSpace('<space_id>')\n     * .then((space) => space.createApiKeyWithId('<api-key-id>', {\n     *   name: 'API Key name'\n     *   environments:[\n     *    {\n     *     sys: {\n     *      type: 'Link'\n     *      linkType: 'Environment',\n     *      id:'<environment_id>'\n     *     }\n     *    }\n     *   ]\n     *   }\n     * }))\n     * .then((apiKey) => console.log(apiKey))\n     * .catch(console.error)\n     * ```\n     */\n    createApiKeyWithId: function createApiKeyWithId(id, payload) {\n      var raw = this.toPlainObject();\n      return makeRequest({\n        entityType: 'ApiKey',\n        action: 'createWithId',\n        params: {\n          spaceId: raw.sys.id,\n          apiKeyId: id\n        },\n        payload: payload\n      }).then(function (data) {\n        return wrapApiKey(makeRequest, data);\n      });\n    },\n\n    /**\n     * Creates an EnvironmentAlias with a custom ID\n     * @param environmentAliasId - EnvironmentAlias ID\n     * @param data - Object representation of the EnvironmentAlias to be created\n     * @return Promise for the newly created EnvironmentAlias\n     * @example ```javascript\n     * const contentful = require('contentful-management')\n     *\n     * const client = contentful.createClient({\n     *   accessToken: '<content_management_api_key>'\n     * })\n     *\n     * client.getSpace('<space_id>')\n     * .then((space) => space.createEnvironmentAliasWithId('<environment-alias-id>', {\n     *   environment: {\n     *     sys: { type: 'Link', linkType: 'Environment', id: 'targetEnvironment' }\n     *   }\n     * }))\n     * .then((environmentAlias) => console.log(environmentAlias))\n     * .catch(console.error)\n     * ```\n     */\n    createEnvironmentAliasWithId: function createEnvironmentAliasWithId(environmentAliasId, data) {\n      var raw = this.toPlainObject();\n      return makeRequest({\n        entityType: 'EnvironmentAlias',\n        action: 'createWithId',\n        params: {\n          spaceId: raw.sys.id,\n          environmentAliasId: environmentAliasId\n        },\n        payload: data\n      }).then(function (response) {\n        return wrapEnvironmentAlias(makeRequest, response);\n      });\n    },\n\n    /**\n     * Gets an Environment Alias\n     * @param Environment Alias ID\n     * @return Promise for an Environment Alias\n     * @example ```javascript\n     * const contentful = require('contentful-management')\n     *\n     * const client = contentful.createClient({\n     *   accessToken: '<content_management_api_key>'\n     * })\n     *\n     * client.getSpace('<space_id>')\n     * .then((space) => space.getEnvironmentAlias('<alias-id>'))\n     * .then((alias) => console.log(alias))\n     * .catch(console.error)\n     * ```\n     */\n    getEnvironmentAlias: function getEnvironmentAlias(environmentAliasId) {\n      var raw = this.toPlainObject();\n      return makeRequest({\n        entityType: 'EnvironmentAlias',\n        action: 'get',\n        params: {\n          spaceId: raw.sys.id,\n          environmentAliasId: environmentAliasId\n        }\n      }).then(function (data) {\n        return wrapEnvironmentAlias(makeRequest, data);\n      });\n    },\n\n    /**\n     * Gets a collection of Environment Aliases\n     * @return Promise for a collection of Environment Aliases\n     * @example ```javascript\n     * const contentful = require('contentful-management')\n     *\n     * const client = contentful.createClient({\n     *   accessToken: '<content_management_api_key>'\n     * })\n     *\n     * client.getSpace('<space_id>')\n     * .then((space) => space.getEnvironmentAliases()\n     * .then((response) => console.log(response.items))\n     * .catch(console.error)\n     * ```\n     */\n    getEnvironmentAliases: function getEnvironmentAliases() {\n      var raw = this.toPlainObject();\n      return makeRequest({\n        entityType: 'EnvironmentAlias',\n        action: 'getMany',\n        params: {\n          spaceId: raw.sys.id\n        }\n      }).then(function (data) {\n        return wrapEnvironmentAliasCollection(makeRequest, data);\n      });\n    },\n\n    /**\n     * Query for scheduled actions in space.\n     * @param query - Object with search parameters. The enviroment id field is mandatory. Check the <a href=\"https://www.contentful.com/developers/docs/references/content-management-api/#/reference/scheduled-actions/scheduled-actions-collection\">REST API reference</a> for more details.\n     * @return Promise for the scheduled actions query\n     *\n     * @example ```javascript\n     *  const contentful = require('contentful-management');\n     *\n     *  const client = contentful.createClient({\n     *    accessToken: '<content_management_api_key>'\n     *  })\n     *\n     *  client.getSpace('<space_id>')\n     *    .then((space) => space.getScheduledActions({\n     *      'environment.sys.id': '<environment_id>',\n     *      'sys.status': 'scheduled'\n     *    }))\n     *    .then((scheduledActionCollection) => console.log(scheduledActionCollection.items))\n     *    .catch(console.error)\n     * ```\n     */\n    getScheduledActions: function getScheduledActions(query) {\n      var raw = this.toPlainObject();\n      return makeRequest({\n        entityType: 'ScheduledAction',\n        action: 'getMany',\n        params: {\n          spaceId: raw.sys.id,\n          query: query\n        }\n      }).then(function (response) {\n        return wrapScheduledActionCollection(makeRequest, response);\n      });\n    },\n\n    /**\n     * Get a Scheduled Action in the current space by environment and ID.\n     *\n     * @throws if the Scheduled Action cannot be found or the user doesn't have permission to read schedules from the entity of the scheduled action itself.\n     * @returns Promise with the Scheduled Action\n     * @example ```javascript\n     *  const contentful = require('contentful-management');\n     *\n     *  const client = contentful.createClient({\n     *    accessToken: '<content_management_api_key>'\n     *  })\n     *\n     *  client.getSpace('<space_id>')\n     *    .then((space) => space.getScheduledAction({\n     *      scheduledActionId: '<scheduled-action-id>',\n     *      environmentId: '<environmentId>'\n     *    }))\n     *    .then((scheduledAction) => console.log(scheduledAction))\n     *    .catch(console.error)\n     * ```\n     */\n    getScheduledAction: function getScheduledAction(_ref) {\n      var scheduledActionId = _ref.scheduledActionId,\n          environmentId = _ref.environmentId;\n      var space = this.toPlainObject();\n      return makeRequest({\n        entityType: 'ScheduledAction',\n        action: 'get',\n        params: {\n          spaceId: space.sys.id,\n          environmentId: environmentId,\n          scheduledActionId: scheduledActionId\n        }\n      }).then(function (scheduledAction) {\n        return wrapScheduledAction(makeRequest, scheduledAction);\n      });\n    },\n\n    /**\n     * Creates a scheduled action\n     * @param data - Object representation of the scheduled action to be created\n     * @return Promise for the newly created scheduled actions\n     * @example ```javascript\n     *  const contentful = require('contentful-management');\n     *\n     *  const client = contentful.createClient({\n     *    accessToken: '<content_management_api_key>'\n     *  })\n     *\n     *  client.getSpace('<space_id>')\n     *    .then((space) => space.createScheduledAction({\n     *      entity: {\n     *        sys: {\n     *          type: 'Link',\n     *          linkType: 'Entry',\n     *          id: '<entry_id>'\n     *        }\n     *      },\n     *      environment: {\n     *        sys: {\n     *          type: 'Link',\n     *          linkType: 'Environment',\n     *          id: '<environment_id>'\n     *        }\n     *      },\n     *      action: 'publish',\n     *      scheduledFor: {\n     *        datetime: <ISO_date_string>,\n     *        timezone: 'Europe/Berlin'\n     *      }\n     *    }))\n     *    .then((scheduledAction) => console.log(scheduledAction))\n     *    .catch(console.error)\n     * ```\n     */\n    createScheduledAction: function createScheduledAction(data) {\n      var raw = this.toPlainObject();\n      return makeRequest({\n        entityType: 'ScheduledAction',\n        action: 'create',\n        params: {\n          spaceId: raw.sys.id\n        },\n        payload: data\n      }).then(function (response) {\n        return wrapScheduledAction(makeRequest, response);\n      });\n    },\n\n    /**\n     * Update a scheduled action\n     * @param {object} options\n     * @param options.scheduledActionId the id of the scheduled action to update\n     * @param options.version the sys.version of the scheduled action to be updated\n     * @param payload the scheduled actions object with updates, omitting sys object\n     * @returns Promise containing a wrapped scheduled action with helper methods\n     * @example ```javascript\n     *  const contentful = require('contentful-management');\n     *\n     *  const client = contentful.createClient({\n     *    accessToken: '<content_management_api_key>'\n     *  })\n     *\n     *  client.getSpace('<space_id>')\n     *    .then((space) => {\n     *      return space.createScheduledAction({\n     *        entity: {\n     *          sys: {\n     *            type: 'Link',\n     *            linkType: 'Entry',\n     *            id: '<entry_id>'\n     *          }\n     *        },\n     *        environment: {\n     *          sys: {\n     *            type: 'Link',\n     *            linkType: 'Environment',\n     *            id: '<environment_id>'\n     *          }\n     *        },\n     *        action: 'publish',\n     *        scheduledFor: {\n     *          datetime: <ISO_date_string>,\n     *          timezone: 'Europe/Berlin'\n     *        }\n     *      })\n     *      .then((scheduledAction) => {\n     *        const { _sys, ...payload } = scheduledAction;\n     *        return space.updateScheduledAction({\n     *          ...payload,\n     *          scheduledFor: {\n     *            ...payload.scheduledFor,\n     *            timezone: 'Europe/Paris'\n     *          }\n     *        })\n     *      })\n     *    .then((scheduledAction) => console.log(scheduledAction))\n     *    .catch(console.error);\n     * ```\n     */\n    updateScheduledAction: function updateScheduledAction(_ref2) {\n      var scheduledActionId = _ref2.scheduledActionId,\n          payload = _ref2.payload,\n          version = _ref2.version;\n      var spaceProps = this.toPlainObject();\n      return makeRequest({\n        entityType: 'ScheduledAction',\n        action: 'update',\n        params: {\n          spaceId: spaceProps.sys.id,\n          version: version,\n          scheduledActionId: scheduledActionId\n        },\n        payload: payload\n      }).then(function (response) {\n        return wrapScheduledAction(makeRequest, response);\n      });\n    },\n\n    /**\n     * Cancels a Scheduled Action.\n     * Only cancels actions that have not yet executed.\n     *\n     * @param {object} options\n     * @param options.scheduledActionId the id of the scheduled action to be canceled\n     * @param options.environmentId the environment ID of the scheduled action to be canceled\n     * @throws if the Scheduled Action cannot be found or the user doesn't have permissions in the entity in the action.\n     * @returns Promise containing a wrapped Scheduled Action with helper methods\n     * @example ```javascript\n     *  const contentful = require('contentful-management');\n     *\n     *  const client = contentful.createClient({\n     *    accessToken: '<content_management_api_key>'\n     *  })\n     *\n     *  // Given that an Scheduled Action is scheduled\n     *  client.getSpace('<space_id>')\n     *    .then((space) => space.deleteScheduledAction({\n     *        environmentId: '<environment-id>',\n     *        scheduledActionId: '<scheduled-action-id>'\n     *     }))\n     *     // The scheduled Action sys.status is now 'canceled'\n     *    .then((scheduledAction) => console.log(scheduledAction))\n     *    .catch(console.error);\n     * ```\n     */\n    deleteScheduledAction: function deleteScheduledAction(_ref3) {\n      var scheduledActionId = _ref3.scheduledActionId,\n          environmentId = _ref3.environmentId;\n      var spaceProps = this.toPlainObject();\n      return makeRequest({\n        entityType: 'ScheduledAction',\n        action: 'delete',\n        params: {\n          spaceId: spaceProps.sys.id,\n          environmentId: environmentId,\n          scheduledActionId: scheduledActionId\n        }\n      }).then(function (response) {\n        return wrapScheduledAction(makeRequest, response);\n      });\n    }\n  };\n}"],"mappings":"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AM,EAAE,SAAS;QACjBC,MAAM,EAAE;UACNC,OAAO,EAAEL,GAAG,CAACM,GAAG,CAACC,EAAE;UACnBU,KAAK,EAAEtE,mBAAmB,CAAC;YACzBsE,KAAK,EAAEA;UACT,CAAC,CAAC,CAACb;QACL;MACF,CAAC,CAAC,CAACQ,IAAI,CAAC,UAAUC,IAAI,EAAE;QACtB,OAAOjD,kBAAkB,CAACd,WAAW,EAAE+D,IAAI,CAAC;MAC9C,CAAC,CAAC;IACJ,CAAC;IAED;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;IACIoB,UAAU,EAAE,SAASA,UAAUA,CAACpB,IAAI,EAAE;MACpC,IAAIb,GAAG,GAAG,IAAI,CAACC,aAAa,CAAC,CAAC;MAC9B,OAAOnD,WAAW,CAAC;QACjBoD,UAAU,EAAE,MAAM;QAClBC,MAAM,EAAE,QAAQ;QAChBC,MAAM,EAAE;UACNC,OAAO,EAAEL,GAAG,CAACM,GAAG,CAACC;QACnB,CAAC;QACDG,OAAO,EAAEG;MACX,CAAC,CAAC,CAACD,IAAI,CAAC,UAAUC,IAAI,EAAE;QACtB,OAAOlD,QAAQ,CAACb,WAAW,EAAE+D,IAAI,CAAC;MACpC,CAAC,CAAC;IACJ,CAAC;IAED;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;IACIqB,gBAAgB,EAAE,SAASA,gBAAgBA,CAAC3B,EAAE,EAAE4B,QAAQ,EAAE;MACxD,IAAInC,GAAG,GAAG,IAAI,CAACC,aAA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"},"metadata":{},"sourceType":"module"}