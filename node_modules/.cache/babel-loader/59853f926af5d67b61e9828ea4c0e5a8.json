{"ast":null,"code":"function ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    enumerableOnly && (symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    })), keys.push.apply(keys, symbols);\n  }\n  return keys;\n}\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = null != arguments[i] ? arguments[i] : {};\n    i % 2 ? ownKeys(Object(source), !0).forEach(function (key) {\n      _defineProperty(target, key, source[key]);\n    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) {\n      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n    });\n  }\n  return target;\n}\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n  return obj;\n}\nimport * as checks from './plain/checks';\nimport entities from './entities';\n/**\n * @private\n */\n\n/**\n * @private\n */\nexport default function createEntryApi(makeRequest) {\n  var _entities$entry = entities.entry,\n    wrapEntry = _entities$entry.wrapEntry,\n    wrapEntryCollection = _entities$entry.wrapEntryCollection;\n  var _entities$snapshot = entities.snapshot,\n    wrapSnapshot = _entities$snapshot.wrapSnapshot,\n    wrapSnapshotCollection = _entities$snapshot.wrapSnapshotCollection;\n  var _entities$task = entities.task,\n    wrapTask = _entities$task.wrapTask,\n    wrapTaskCollection = _entities$task.wrapTaskCollection;\n  var _entities$comment = entities.comment,\n    wrapComment = _entities$comment.wrapComment,\n    wrapCommentCollection = _entities$comment.wrapCommentCollection;\n  var getParams = function getParams(self) {\n    var entry = self.toPlainObject();\n    return {\n      params: {\n        spaceId: entry.sys.space.sys.id,\n        environmentId: entry.sys.environment.sys.id,\n        entryId: entry.sys.id\n      },\n      raw: entry\n    };\n  };\n  return {\n    /**\n     * Sends an update to the server with any changes made to the object's properties\n     * @return Object returned from the server with updated changes.\n     * @example ```javascript\n     * const contentful = require('contentful-management')\n     *\n     * const client = contentful.createClient({\n     *   accessToken: '<content_management_api_key>'\n     * })\n     *\n     * client.getSpace('<space_id>')\n     * .then((space) => space.getEnvironment('<environment_id>'))\n     * .then((environment) => environment.getEntry('<entry_id>'))\n     * .then((entry) => {\n     *   entry.fields.title['en-US'] = 'New entry title'\n     *   return entry.update()\n     * })\n     * .then((entry) => console.log(`Entry ${entry.sys.id} updated.`))\n     * .catch(console.error)\n     * ```\n     */\n    update: function update() {\n      var _getParams = getParams(this),\n        raw = _getParams.raw,\n        params = _getParams.params;\n      return makeRequest({\n        entityType: 'Entry',\n        action: 'update',\n        params: params,\n        payload: raw\n      }).then(function (data) {\n        return wrapEntry(makeRequest, data);\n      });\n    },\n    /**\n     * Sends an JSON patch to the server with any changes made to the object's properties\n     * @return Object returned from the server with updated changes.\n     * @example ```javascript\n     * const contentful = require('contentful-management')\n     *\n     * const client = contentful.createClient({\n     *   accessToken: '<content_management_api_key>'\n     * })\n     *\n     * client.getSpace('<space_id>')\n     * .then((space) => space.getEnvironment('<environment_id>'))\n     * .then((environment) => environment.getEntry('<entry_id>'))\n     * .then((entry) => entry.patch([\n     *   {\n     *     op: 'replace',\n     *     path: '/fields/title/en-US',\n     *     value: 'New entry title'\n     *   }\n     * ]))\n     * .then((entry) => console.log(`Entry ${entry.sys.id} updated.`))\n     * .catch(console.error)\n     * ```\n     */\n    patch: function patch(ops) {\n      var _getParams2 = getParams(this),\n        raw = _getParams2.raw,\n        params = _getParams2.params;\n      return makeRequest({\n        entityType: 'Entry',\n        action: 'patch',\n        params: _objectSpread(_objectSpread({}, params), {}, {\n          version: raw.sys.version\n        }),\n        payload: ops\n      }).then(function (data) {\n        return wrapEntry(makeRequest, data);\n      });\n    },\n    /**\n     * Deletes this object on the server.\n     * @return Promise for the deletion. It contains no data, but the Promise error case should be handled.\n     * @example ```javascript\n     * const contentful = require('contentful-management')\n     *\n     * const client = contentful.createClient({\n     *   accessToken: '<content_management_api_key>'\n     * })\n     *\n     * client.getSpace('<space_id>')\n     * .then((space) => space.getEnvironment('<environment_id>'))\n     * .then((environment) => environment.getEntry('<entry_id>'))\n     * .then((entry) => entry.delete())\n     * .then(() => console.log(`Entry deleted.`))\n     * .catch(console.error)\n     * ```\n     */\n    \"delete\": function del() {\n      var _getParams3 = getParams(this),\n        params = _getParams3.params;\n      return makeRequest({\n        entityType: 'Entry',\n        action: 'delete',\n        params: params\n      });\n    },\n    /**\n     * Publishes the object\n     * @return Object returned from the server with updated metadata.\n     * @example ```javascript\n     * const contentful = require('contentful-management')\n     *\n     * const client = contentful.createClient({\n     *   accessToken: '<content_management_api_key>'\n     * })\n     *\n     * client.getSpace('<space_id>')\n     * .then((space) => space.getEnvironment('<environment_id>'))\n     * .then((environment) => environment.getEntry('<entry_id>'))\n     * .then((entry) => entry.publish())\n     * .then((entry) => console.log(`Entry ${entry.sys.id} published.`))\n     * .catch(console.error)\n     * ```\n     */\n    publish: function publish() {\n      var _getParams4 = getParams(this),\n        raw = _getParams4.raw,\n        params = _getParams4.params;\n      return makeRequest({\n        entityType: 'Entry',\n        action: 'publish',\n        params: params,\n        payload: raw\n      }).then(function (data) {\n        return wrapEntry(makeRequest, data);\n      });\n    },\n    /**\n     * Unpublishes the object\n     * @return Object returned from the server with updated metadata.\n     * @example ```javascript\n     * const contentful = require('contentful-management')\n     *\n     * const client = contentful.createClient({\n     *   accessToken: '<content_management_api_key>'\n     * })\n     *\n     * client.getSpace('<space_id>')\n     * .then((space) => space.getEnvironment('<environment_id>'))\n     * .then((environment) => environment.getEntry('<entry_id>'))\n     * .then((entry) => entry.unpublish())\n     * .then((entry) => console.log(`Entry ${entry.sys.id} unpublished.`))\n     * .catch(console.error)\n     * ```\n     */\n    unpublish: function unpublish() {\n      var _getParams5 = getParams(this),\n        params = _getParams5.params;\n      return makeRequest({\n        entityType: 'Entry',\n        action: 'unpublish',\n        params: params\n      }).then(function (data) {\n        return wrapEntry(makeRequest, data);\n      });\n    },\n    /**\n     * Archives the object\n     * @return Object returned from the server with updated metadata.\n     * @example ```javascript\n     * const contentful = require('contentful-management')\n     *\n     * const client = contentful.createClient({\n     *   accessToken: '<content_management_api_key>'\n     * })\n     *\n     * client.getSpace('<space_id>')\n     * .then((space) => space.getEnvironment('<environment_id>'))\n     * .then((environment) => environment.getEntry('<entry_id>'))\n     * .then((entry) => entry.archive())\n     * .then((entry) => console.log(`Entry ${entry.sys.id} archived.`))\n     * .catch(console.error)\n     * ```\n     */\n    archive: function archive() {\n      var _getParams6 = getParams(this),\n        params = _getParams6.params;\n      return makeRequest({\n        entityType: 'Entry',\n        action: 'archive',\n        params: params\n      }).then(function (data) {\n        return wrapEntry(makeRequest, data);\n      });\n    },\n    /**\n     * Unarchives the object\n     * @return Object returned from the server with updated metadata.\n     * @example ```javascript\n     * const contentful = require('contentful-management')\n     *\n     * const client = contentful.createClient({\n     *   accessToken: '<content_management_api_key>'\n     * })\n     *\n     * client.getSpace('<space_id>')\n     * .then((space) => space.getEnvironment('<environment_id>'))\n     * .then((environment) => environment.getEntry('<entry_id>'))\n     * .then((entry) => entry.unarchive())\n     * .then((entry) => console.log(`Entry ${entry.sys.id} unarchived.`))\n     * .catch(console.error)\n     * ```\n     */\n    unarchive: function unarchive() {\n      var _getParams7 = getParams(this),\n        params = _getParams7.params;\n      return makeRequest({\n        entityType: 'Entry',\n        action: 'unarchive',\n        params: params\n      }).then(function (data) {\n        return wrapEntry(makeRequest, data);\n      });\n    },\n    /**\n     * Gets all snapshots of an entry\n     * @example ```javascript\n     * const contentful = require('contentful-management')\n     *\n     * const client = contentful.createClient({\n     *   accessToken: '<content_management_api_key>'\n     * })\n     *\n     * client.getSpace('<space_id>')\n     * .then((space) => space.getEnvironment('<environment_id>'))\n     * .then((environment) => environment.getEntry('<entry_id>'))\n     * .then((entry) => entry.getSnapshots())\n     * .then((snapshots) => console.log(snapshots.items))\n     * .catch(console.error)\n     * ```\n     */\n    getSnapshots: function getSnapshots() {\n      var query = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      var _getParams8 = getParams(this),\n        params = _getParams8.params;\n      return makeRequest({\n        entityType: 'Snapshot',\n        action: 'getManyForEntry',\n        params: _objectSpread(_objectSpread({}, params), {}, {\n          query: query\n        })\n      }).then(function (data) {\n        return wrapSnapshotCollection(makeRequest, data);\n      });\n    },\n    /**\n     * Gets a snapshot of an entry\n     * @param snapshotId - Id of the snapshot\n     * @example ```javascript\n     * const contentful = require('contentful-management')\n     *\n     * const client = contentful.createClient({\n     *   accessToken: '<content_management_api_key>'\n     * })\n     *\n     * client.getSpace('<space_id>')\n     * .then((space) => space.getEnvironment('<environment_id>'))\n     * .then((environment) => environment.getEntry('<entry_id>'))\n     * .then((entry) => entry.getSnapshot('<snapshot_id>'))\n     * .then((snapshot) => console.log(snapshot))\n     * .catch(console.error)\n     * ```\n     */\n    getSnapshot: function getSnapshot(snapshotId) {\n      var _getParams9 = getParams(this),\n        params = _getParams9.params;\n      return makeRequest({\n        entityType: 'Snapshot',\n        action: 'getForEntry',\n        params: _objectSpread(_objectSpread({}, params), {}, {\n          snapshotId: snapshotId\n        })\n      }).then(function (data) {\n        return wrapSnapshot(makeRequest, data);\n      });\n    },\n    /**\n     * Creates a new comment for an entry\n     * @param data Object representation of the Comment to be created\n     * @returns Promise for the newly created Comment\n     * @example ```javascript\n     * const contentful = require('contentful-management')\n     *\n     * const client = contentful.createClient({\n     *   accessToken: '<content_management_api_key>'\n     * })\n     *\n     * client.getSpace('<space_id>')\n     * .then((space) => space.getEnvironment('<environment-id>'))\n     * .then((environment) => environment.getEntry('<entry-id>'))\n     * .then((entry) => entry.createComment({\n     *   body: 'Something left to do'\n     * }))\n     * .then((comment) => console.log(comment))\n     * .catch(console.error)\n     * ```\n     */\n    createComment: function createComment(data) {\n      var _getParams10 = getParams(this),\n        params = _getParams10.params;\n      return makeRequest({\n        entityType: 'Comment',\n        action: 'create',\n        params: params,\n        payload: data\n      }).then(function (data) {\n        return wrapComment(makeRequest, data);\n      });\n    },\n    /**\n     * Gets all comments of an entry\n     * @returns\n     * const contentful = require('contentful-management')\n     *\n     * const client = contentful.createClient({\n     *   accessToken: '<content_management_api_key>'\n     * })\n     *\n     * client.getSpace('<space_id>')\n     * .then((space) => space.getEnvironment('<environment-id>'))\n     * .then((environment) => environment.getEntry('<entry-id>'))\n     * .then((entry) => entry.getComments())\n     * .then((comments) => console.log(comments))\n     * .catch(console.error)\n     * ```\n     */\n    getComments: function getComments() {\n      var _getParams11 = getParams(this),\n        params = _getParams11.params;\n      return makeRequest({\n        entityType: 'Comment',\n        action: 'getAll',\n        params: params\n      }).then(function (data) {\n        return wrapCommentCollection(makeRequest, data);\n      });\n    },\n    /**\n     * Gets a comment of an entry\n     * @returns\n     * const contentful = require('contentful-management')\n     *\n     * const client = contentful.createClient({\n     *   accessToken: '<content_management_api_key>'\n     * })\n     *\n     * client.getSpace('<space_id>')\n     * .then((space) => space.getEnvironment('<environment-id>'))\n     * .then((environment) => environment.getEntry('<entry-id>'))\n     * .then((entry) => entry.getComment(`<comment-id>`))\n     * .then((comment) => console.log(comment))\n     * .catch(console.error)\n     * ```\n     */\n    getComment: function getComment(id) {\n      var _getParams12 = getParams(this),\n        params = _getParams12.params;\n      return makeRequest({\n        entityType: 'Comment',\n        action: 'get',\n        params: _objectSpread(_objectSpread({}, params), {}, {\n          commentId: id\n        })\n      }).then(function (data) {\n        return wrapComment(makeRequest, data);\n      });\n    },\n    /**\n     * Creates a new task for an entry\n     * @param data Object representation of the Task to be created\n     * @returns Promise for the newly created Task\n     * @example ```javascript\n     * const contentful = require('contentful-management')\n     *\n     * const client = contentful.createClient({\n     *   accessToken: '<content_management_api_key>'\n     * })\n     *\n     * client.getSpace('<space_id>')\n     * .then((space) => space.getEnvironment('<environment-id>'))\n     * .then((environment) => environment.getEntry('<entry-id>'))\n     * .then((entry) => entry.createTask({\n     *   body: 'Something left to do',\n     *   assignedTo: '<user-id>',\n     *   status: 'active'\n     * }))\n     * .then((task) => console.log(task))\n     * .catch(console.error)\n     * ```\n     */\n    createTask: function createTask(data) {\n      var _getParams13 = getParams(this),\n        params = _getParams13.params;\n      return makeRequest({\n        entityType: 'Task',\n        action: 'create',\n        params: params,\n        payload: data\n      }).then(function (data) {\n        return wrapTask(makeRequest, data);\n      });\n    },\n    /**\n     * Gets all tasks of an entry\n     * @returns\n     * const contentful = require('contentful-management')\n     *\n     * const client = contentful.createClient({\n     *   accessToken: '<content_management_api_key>'\n     * })\n     *\n     * client.getSpace('<space_id>')\n     * .then((space) => space.getEnvironment('<environment-id>'))\n     * .then((environment) => environment.getEntry('<entry-id>'))\n     * .then((entry) => entry.getTasks())\n     * .then((tasks) => console.log(tasks))\n     * .catch(console.error)\n     * ```\n     */\n    getTasks: function getTasks() {\n      var _getParams14 = getParams(this),\n        params = _getParams14.params;\n      return makeRequest({\n        entityType: 'Task',\n        action: 'getAll',\n        params: params\n      }).then(function (data) {\n        return wrapTaskCollection(makeRequest, data);\n      });\n    },\n    /**\n     * Gets a task of an entry\n     * @returns\n     * const contentful = require('contentful-management')\n     *\n     * const client = contentful.createClient({\n     *   accessToken: '<content_management_api_key>'\n     * })\n     *\n     * client.getSpace('<space_id>')\n     * .then((space) => space.getEnvironment('<environment-id>'))\n     * .then((environment) => environment.getEntry('<entry-id>'))\n     * .then((entry) => entry.getTask(`<task-id>`))\n     * .then((task) => console.log(task))\n     * .catch(console.error)\n     * ```\n     */\n    getTask: function getTask(id) {\n      var _getParams15 = getParams(this),\n        params = _getParams15.params;\n      return makeRequest({\n        entityType: 'Task',\n        action: 'get',\n        params: _objectSpread(_objectSpread({}, params), {}, {\n          taskId: id\n        })\n      }).then(function (data) {\n        return wrapTask(makeRequest, data);\n      });\n    },\n    /**\n     * Checks if the entry is published. A published entry might have unpublished changes\n     */\n    isPublished: function isPublished() {\n      var raw = this.toPlainObject();\n      return checks.isPublished(raw);\n    },\n    /**\n     * Checks if the entry is updated. This means the entry was previously published but has unpublished changes.\n     */\n    isUpdated: function isUpdated() {\n      var raw = this.toPlainObject();\n      return checks.isUpdated(raw);\n    },\n    /**\n     * Checks if the entry is in draft mode. This means it is not published.\n     */\n    isDraft: function isDraft() {\n      var raw = this.toPlainObject();\n      return checks.isDraft(raw);\n    },\n    /**\n     * Checks if entry is archived. This means it's not exposed to the Delivery/Preview APIs.\n     */\n    isArchived: function isArchived() {\n      var raw = this.toPlainObject();\n      return checks.isArchived(raw);\n    },\n    /**\n     * Recursively collects references of an entry and their descendants\n     */\n    references: function references(options) {\n      var raw = this.toPlainObject();\n      return makeRequest({\n        entityType: 'Entry',\n        action: 'references',\n        params: {\n          spaceId: raw.sys.space.sys.id,\n          environmentId: raw.sys.environment.sys.id,\n          entryId: raw.sys.id,\n          maxDepth: (options === null || options === void 0 ? void 0 : options.include) || (options === null || options === void 0 ? void 0 : options.maxDepth)\n        }\n      }).then(function (response) {\n        return wrapEntryCollection(makeRequest, response);\n      });\n    }\n  };\n}","map":{"version":3,"names":["ownKeys","object","enumerableOnly","keys","Object","getOwnPropertySymbols","symbols","filter","sym","getOwnPropertyDescriptor","enumerable","push","apply","_objectSpread","target","i","arguments","length","source","forEach","key","_defineProperty","getOwnPropertyDescriptors","defineProperties","defineProperty","obj","value","configurable","writable","checks","entities","createEntryApi","makeRequest","_entities$entry","entry","wrapEntry","wrapEntryCollection","_entities$snapshot","snapshot","wrapSnapshot","wrapSnapshotCollection","_entities$task","task","wrapTask","wrapTaskCollection","_entities$comment","comment","wrapComment","wrapCommentCollection","getParams","self","toPlainObject","params","spaceId","sys","space","id","environmentId","environment","entryId","raw","update","_getParams","entityType","action","payload","then","data","patch","ops","_getParams2","version","del","_getParams3","publish","_getParams4","unpublish","_getParams5","archive","_getParams6","unarchive","_getParams7","getSnapshots","query","undefined","_getParams8","getSnapshot","snapshotId","_getParams9","createComment","_getParams10","getComments","_getParams11","getComment","_getParams12","commentId","createTask","_getParams13","getTasks","_getParams14","getTask","_getParams15","taskId","isPublished","isUpdated","isDraft","isArchived","references","options","maxDepth","include","response"],"sources":["C:/Users/hrith/OneDrive/Desktop/medcertificates-main/node_modules/contentful-management/dist/es-modules/create-entry-api.js"],"sourcesContent":["function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport * as checks from './plain/checks';\nimport entities from './entities';\n/**\n * @private\n */\n\n/**\n * @private\n */\nexport default function createEntryApi(makeRequest) {\n  var _entities$entry = entities.entry,\n      wrapEntry = _entities$entry.wrapEntry,\n      wrapEntryCollection = _entities$entry.wrapEntryCollection;\n  var _entities$snapshot = entities.snapshot,\n      wrapSnapshot = _entities$snapshot.wrapSnapshot,\n      wrapSnapshotCollection = _entities$snapshot.wrapSnapshotCollection;\n  var _entities$task = entities.task,\n      wrapTask = _entities$task.wrapTask,\n      wrapTaskCollection = _entities$task.wrapTaskCollection;\n  var _entities$comment = entities.comment,\n      wrapComment = _entities$comment.wrapComment,\n      wrapCommentCollection = _entities$comment.wrapCommentCollection;\n\n  var getParams = function getParams(self) {\n    var entry = self.toPlainObject();\n    return {\n      params: {\n        spaceId: entry.sys.space.sys.id,\n        environmentId: entry.sys.environment.sys.id,\n        entryId: entry.sys.id\n      },\n      raw: entry\n    };\n  };\n\n  return {\n    /**\n     * Sends an update to the server with any changes made to the object's properties\n     * @return Object returned from the server with updated changes.\n     * @example ```javascript\n     * const contentful = require('contentful-management')\n     *\n     * const client = contentful.createClient({\n     *   accessToken: '<content_management_api_key>'\n     * })\n     *\n     * client.getSpace('<space_id>')\n     * .then((space) => space.getEnvironment('<environment_id>'))\n     * .then((environment) => environment.getEntry('<entry_id>'))\n     * .then((entry) => {\n     *   entry.fields.title['en-US'] = 'New entry title'\n     *   return entry.update()\n     * })\n     * .then((entry) => console.log(`Entry ${entry.sys.id} updated.`))\n     * .catch(console.error)\n     * ```\n     */\n    update: function update() {\n      var _getParams = getParams(this),\n          raw = _getParams.raw,\n          params = _getParams.params;\n\n      return makeRequest({\n        entityType: 'Entry',\n        action: 'update',\n        params: params,\n        payload: raw\n      }).then(function (data) {\n        return wrapEntry(makeRequest, data);\n      });\n    },\n\n    /**\n     * Sends an JSON patch to the server with any changes made to the object's properties\n     * @return Object returned from the server with updated changes.\n     * @example ```javascript\n     * const contentful = require('contentful-management')\n     *\n     * const client = contentful.createClient({\n     *   accessToken: '<content_management_api_key>'\n     * })\n     *\n     * client.getSpace('<space_id>')\n     * .then((space) => space.getEnvironment('<environment_id>'))\n     * .then((environment) => environment.getEntry('<entry_id>'))\n     * .then((entry) => entry.patch([\n     *   {\n     *     op: 'replace',\n     *     path: '/fields/title/en-US',\n     *     value: 'New entry title'\n     *   }\n     * ]))\n     * .then((entry) => console.log(`Entry ${entry.sys.id} updated.`))\n     * .catch(console.error)\n     * ```\n     */\n    patch: function patch(ops) {\n      var _getParams2 = getParams(this),\n          raw = _getParams2.raw,\n          params = _getParams2.params;\n\n      return makeRequest({\n        entityType: 'Entry',\n        action: 'patch',\n        params: _objectSpread(_objectSpread({}, params), {}, {\n          version: raw.sys.version\n        }),\n        payload: ops\n      }).then(function (data) {\n        return wrapEntry(makeRequest, data);\n      });\n    },\n\n    /**\n     * Deletes this object on the server.\n     * @return Promise for the deletion. It contains no data, but the Promise error case should be handled.\n     * @example ```javascript\n     * const contentful = require('contentful-management')\n     *\n     * const client = contentful.createClient({\n     *   accessToken: '<content_management_api_key>'\n     * })\n     *\n     * client.getSpace('<space_id>')\n     * .then((space) => space.getEnvironment('<environment_id>'))\n     * .then((environment) => environment.getEntry('<entry_id>'))\n     * .then((entry) => entry.delete())\n     * .then(() => console.log(`Entry deleted.`))\n     * .catch(console.error)\n     * ```\n     */\n    \"delete\": function del() {\n      var _getParams3 = getParams(this),\n          params = _getParams3.params;\n\n      return makeRequest({\n        entityType: 'Entry',\n        action: 'delete',\n        params: params\n      });\n    },\n\n    /**\n     * Publishes the object\n     * @return Object returned from the server with updated metadata.\n     * @example ```javascript\n     * const contentful = require('contentful-management')\n     *\n     * const client = contentful.createClient({\n     *   accessToken: '<content_management_api_key>'\n     * })\n     *\n     * client.getSpace('<space_id>')\n     * .then((space) => space.getEnvironment('<environment_id>'))\n     * .then((environment) => environment.getEntry('<entry_id>'))\n     * .then((entry) => entry.publish())\n     * .then((entry) => console.log(`Entry ${entry.sys.id} published.`))\n     * .catch(console.error)\n     * ```\n     */\n    publish: function publish() {\n      var _getParams4 = getParams(this),\n          raw = _getParams4.raw,\n          params = _getParams4.params;\n\n      return makeRequest({\n        entityType: 'Entry',\n        action: 'publish',\n        params: params,\n        payload: raw\n      }).then(function (data) {\n        return wrapEntry(makeRequest, data);\n      });\n    },\n\n    /**\n     * Unpublishes the object\n     * @return Object returned from the server with updated metadata.\n     * @example ```javascript\n     * const contentful = require('contentful-management')\n     *\n     * const client = contentful.createClient({\n     *   accessToken: '<content_management_api_key>'\n     * })\n     *\n     * client.getSpace('<space_id>')\n     * .then((space) => space.getEnvironment('<environment_id>'))\n     * .then((environment) => environment.getEntry('<entry_id>'))\n     * .then((entry) => entry.unpublish())\n     * .then((entry) => console.log(`Entry ${entry.sys.id} unpublished.`))\n     * .catch(console.error)\n     * ```\n     */\n    unpublish: function unpublish() {\n      var _getParams5 = getParams(this),\n          params = _getParams5.params;\n\n      return makeRequest({\n        entityType: 'Entry',\n        action: 'unpublish',\n        params: params\n      }).then(function (data) {\n        return wrapEntry(makeRequest, data);\n      });\n    },\n\n    /**\n     * Archives the object\n     * @return Object returned from the server with updated metadata.\n     * @example ```javascript\n     * const contentful = require('contentful-management')\n     *\n     * const client = contentful.createClient({\n     *   accessToken: '<content_management_api_key>'\n     * })\n     *\n     * client.getSpace('<space_id>')\n     * .then((space) => space.getEnvironment('<environment_id>'))\n     * .then((environment) => environment.getEntry('<entry_id>'))\n     * .then((entry) => entry.archive())\n     * .then((entry) => console.log(`Entry ${entry.sys.id} archived.`))\n     * .catch(console.error)\n     * ```\n     */\n    archive: function archive() {\n      var _getParams6 = getParams(this),\n          params = _getParams6.params;\n\n      return makeRequest({\n        entityType: 'Entry',\n        action: 'archive',\n        params: params\n      }).then(function (data) {\n        return wrapEntry(makeRequest, data);\n      });\n    },\n\n    /**\n     * Unarchives the object\n     * @return Object returned from the server with updated metadata.\n     * @example ```javascript\n     * const contentful = require('contentful-management')\n     *\n     * const client = contentful.createClient({\n     *   accessToken: '<content_management_api_key>'\n     * })\n     *\n     * client.getSpace('<space_id>')\n     * .then((space) => space.getEnvironment('<environment_id>'))\n     * .then((environment) => environment.getEntry('<entry_id>'))\n     * .then((entry) => entry.unarchive())\n     * .then((entry) => console.log(`Entry ${entry.sys.id} unarchived.`))\n     * .catch(console.error)\n     * ```\n     */\n    unarchive: function unarchive() {\n      var _getParams7 = getParams(this),\n          params = _getParams7.params;\n\n      return makeRequest({\n        entityType: 'Entry',\n        action: 'unarchive',\n        params: params\n      }).then(function (data) {\n        return wrapEntry(makeRequest, data);\n      });\n    },\n\n    /**\n     * Gets all snapshots of an entry\n     * @example ```javascript\n     * const contentful = require('contentful-management')\n     *\n     * const client = contentful.createClient({\n     *   accessToken: '<content_management_api_key>'\n     * })\n     *\n     * client.getSpace('<space_id>')\n     * .then((space) => space.getEnvironment('<environment_id>'))\n     * .then((environment) => environment.getEntry('<entry_id>'))\n     * .then((entry) => entry.getSnapshots())\n     * .then((snapshots) => console.log(snapshots.items))\n     * .catch(console.error)\n     * ```\n     */\n    getSnapshots: function getSnapshots() {\n      var query = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n      var _getParams8 = getParams(this),\n          params = _getParams8.params;\n\n      return makeRequest({\n        entityType: 'Snapshot',\n        action: 'getManyForEntry',\n        params: _objectSpread(_objectSpread({}, params), {}, {\n          query: query\n        })\n      }).then(function (data) {\n        return wrapSnapshotCollection(makeRequest, data);\n      });\n    },\n\n    /**\n     * Gets a snapshot of an entry\n     * @param snapshotId - Id of the snapshot\n     * @example ```javascript\n     * const contentful = require('contentful-management')\n     *\n     * const client = contentful.createClient({\n     *   accessToken: '<content_management_api_key>'\n     * })\n     *\n     * client.getSpace('<space_id>')\n     * .then((space) => space.getEnvironment('<environment_id>'))\n     * .then((environment) => environment.getEntry('<entry_id>'))\n     * .then((entry) => entry.getSnapshot('<snapshot_id>'))\n     * .then((snapshot) => console.log(snapshot))\n     * .catch(console.error)\n     * ```\n     */\n    getSnapshot: function getSnapshot(snapshotId) {\n      var _getParams9 = getParams(this),\n          params = _getParams9.params;\n\n      return makeRequest({\n        entityType: 'Snapshot',\n        action: 'getForEntry',\n        params: _objectSpread(_objectSpread({}, params), {}, {\n          snapshotId: snapshotId\n        })\n      }).then(function (data) {\n        return wrapSnapshot(makeRequest, data);\n      });\n    },\n\n    /**\n     * Creates a new comment for an entry\n     * @param data Object representation of the Comment to be created\n     * @returns Promise for the newly created Comment\n     * @example ```javascript\n     * const contentful = require('contentful-management')\n     *\n     * const client = contentful.createClient({\n     *   accessToken: '<content_management_api_key>'\n     * })\n     *\n     * client.getSpace('<space_id>')\n     * .then((space) => space.getEnvironment('<environment-id>'))\n     * .then((environment) => environment.getEntry('<entry-id>'))\n     * .then((entry) => entry.createComment({\n     *   body: 'Something left to do'\n     * }))\n     * .then((comment) => console.log(comment))\n     * .catch(console.error)\n     * ```\n     */\n    createComment: function createComment(data) {\n      var _getParams10 = getParams(this),\n          params = _getParams10.params;\n\n      return makeRequest({\n        entityType: 'Comment',\n        action: 'create',\n        params: params,\n        payload: data\n      }).then(function (data) {\n        return wrapComment(makeRequest, data);\n      });\n    },\n\n    /**\n     * Gets all comments of an entry\n     * @returns\n     * const contentful = require('contentful-management')\n     *\n     * const client = contentful.createClient({\n     *   accessToken: '<content_management_api_key>'\n     * })\n     *\n     * client.getSpace('<space_id>')\n     * .then((space) => space.getEnvironment('<environment-id>'))\n     * .then((environment) => environment.getEntry('<entry-id>'))\n     * .then((entry) => entry.getComments())\n     * .then((comments) => console.log(comments))\n     * .catch(console.error)\n     * ```\n     */\n    getComments: function getComments() {\n      var _getParams11 = getParams(this),\n          params = _getParams11.params;\n\n      return makeRequest({\n        entityType: 'Comment',\n        action: 'getAll',\n        params: params\n      }).then(function (data) {\n        return wrapCommentCollection(makeRequest, data);\n      });\n    },\n\n    /**\n     * Gets a comment of an entry\n     * @returns\n     * const contentful = require('contentful-management')\n     *\n     * const client = contentful.createClient({\n     *   accessToken: '<content_management_api_key>'\n     * })\n     *\n     * client.getSpace('<space_id>')\n     * .then((space) => space.getEnvironment('<environment-id>'))\n     * .then((environment) => environment.getEntry('<entry-id>'))\n     * .then((entry) => entry.getComment(`<comment-id>`))\n     * .then((comment) => console.log(comment))\n     * .catch(console.error)\n     * ```\n     */\n    getComment: function getComment(id) {\n      var _getParams12 = getParams(this),\n          params = _getParams12.params;\n\n      return makeRequest({\n        entityType: 'Comment',\n        action: 'get',\n        params: _objectSpread(_objectSpread({}, params), {}, {\n          commentId: id\n        })\n      }).then(function (data) {\n        return wrapComment(makeRequest, data);\n      });\n    },\n\n    /**\n     * Creates a new task for an entry\n     * @param data Object representation of the Task to be created\n     * @returns Promise for the newly created Task\n     * @example ```javascript\n     * const contentful = require('contentful-management')\n     *\n     * const client = contentful.createClient({\n     *   accessToken: '<content_management_api_key>'\n     * })\n     *\n     * client.getSpace('<space_id>')\n     * .then((space) => space.getEnvironment('<environment-id>'))\n     * .then((environment) => environment.getEntry('<entry-id>'))\n     * .then((entry) => entry.createTask({\n     *   body: 'Something left to do',\n     *   assignedTo: '<user-id>',\n     *   status: 'active'\n     * }))\n     * .then((task) => console.log(task))\n     * .catch(console.error)\n     * ```\n     */\n    createTask: function createTask(data) {\n      var _getParams13 = getParams(this),\n          params = _getParams13.params;\n\n      return makeRequest({\n        entityType: 'Task',\n        action: 'create',\n        params: params,\n        payload: data\n      }).then(function (data) {\n        return wrapTask(makeRequest, data);\n      });\n    },\n\n    /**\n     * Gets all tasks of an entry\n     * @returns\n     * const contentful = require('contentful-management')\n     *\n     * const client = contentful.createClient({\n     *   accessToken: '<content_management_api_key>'\n     * })\n     *\n     * client.getSpace('<space_id>')\n     * .then((space) => space.getEnvironment('<environment-id>'))\n     * .then((environment) => environment.getEntry('<entry-id>'))\n     * .then((entry) => entry.getTasks())\n     * .then((tasks) => console.log(tasks))\n     * .catch(console.error)\n     * ```\n     */\n    getTasks: function getTasks() {\n      var _getParams14 = getParams(this),\n          params = _getParams14.params;\n\n      return makeRequest({\n        entityType: 'Task',\n        action: 'getAll',\n        params: params\n      }).then(function (data) {\n        return wrapTaskCollection(makeRequest, data);\n      });\n    },\n\n    /**\n     * Gets a task of an entry\n     * @returns\n     * const contentful = require('contentful-management')\n     *\n     * const client = contentful.createClient({\n     *   accessToken: '<content_management_api_key>'\n     * })\n     *\n     * client.getSpace('<space_id>')\n     * .then((space) => space.getEnvironment('<environment-id>'))\n     * .then((environment) => environment.getEntry('<entry-id>'))\n     * .then((entry) => entry.getTask(`<task-id>`))\n     * .then((task) => console.log(task))\n     * .catch(console.error)\n     * ```\n     */\n    getTask: function getTask(id) {\n      var _getParams15 = getParams(this),\n          params = _getParams15.params;\n\n      return makeRequest({\n        entityType: 'Task',\n        action: 'get',\n        params: _objectSpread(_objectSpread({}, params), {}, {\n          taskId: id\n        })\n      }).then(function (data) {\n        return wrapTask(makeRequest, data);\n      });\n    },\n\n    /**\n     * Checks if the entry is published. A published entry might have unpublished changes\n     */\n    isPublished: function isPublished() {\n      var raw = this.toPlainObject();\n      return checks.isPublished(raw);\n    },\n\n    /**\n     * Checks if the entry is updated. This means the entry was previously published but has unpublished changes.\n     */\n    isUpdated: function isUpdated() {\n      var raw = this.toPlainObject();\n      return checks.isUpdated(raw);\n    },\n\n    /**\n     * Checks if the entry is in draft mode. This means it is not published.\n     */\n    isDraft: function isDraft() {\n      var raw = this.toPlainObject();\n      return checks.isDraft(raw);\n    },\n\n    /**\n     * Checks if entry is archived. This means it's not exposed to the Delivery/Preview APIs.\n     */\n    isArchived: function isArchived() {\n      var raw = this.toPlainObject();\n      return checks.isArchived(raw);\n    },\n\n    /**\n     * Recursively collects references of an entry and their descendants\n     */\n    references: function references(options) {\n      var raw = this.toPlainObject();\n      return makeRequest({\n        entityType: 'Entry',\n        action: 'references',\n        params: {\n          spaceId: raw.sys.space.sys.id,\n          environmentId: raw.sys.environment.sys.id,\n          entryId: raw.sys.id,\n          maxDepth: (options === null || options === void 0 ? void 0 : options.include) || (options === null || options === void 0 ? void 0 : options.maxDepth)\n        }\n      }).then(function (response) {\n        return wrapEntryCollection(makeRequest, response);\n      });\n    }\n  };\n}"],"mappings":"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"},"metadata":{},"sourceType":"module"}